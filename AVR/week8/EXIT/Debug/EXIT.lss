
EXIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d94  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000e08  2**0
                  ALLOC
  2 .stab         00001128  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000672  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__vector_1>
   8:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_2>
   c:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bf 06 	call	0xd7e	; 0xd7e <main>
  74:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_enuInit>:
#include"DIO_cofig.h"
#include"errorState.h"
#include "stdTypes.h"


ES_ERROR DIO_enuInit(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
ES_ERROR local_enuerrorstate=ES_NOK;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	89 83       	std	Y+1, r24	; 0x01

DDRA=conc(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 83       	st	Z, r24
DDRB=conc(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
  92:	e7 e3       	ldi	r30, 0x37	; 55
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	80 83       	st	Z, r24
DDRC=conc(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
  9a:	e4 e3       	ldi	r30, 0x34	; 52
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	80 83       	st	Z, r24
DDRD=conc(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
  a2:	e1 e3       	ldi	r30, 0x31	; 49
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	85 ed       	ldi	r24, 0xD5	; 213
  a8:	80 83       	st	Z, r24

PORTA=conc(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
  aa:	eb e3       	ldi	r30, 0x3B	; 59
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
PORTB=conc(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
  b0:	e8 e3       	ldi	r30, 0x38	; 56
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
PORTC=conc(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
  b6:	e5 e3       	ldi	r30, 0x35	; 53
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	80 83       	st	Z, r24
PORTD=conc(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
  be:	e2 e3       	ldi	r30, 0x32	; 50
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1

    local_enuerrorstate=ES_OK;
  c4:	19 82       	std	Y+1, r1	; 0x01

return local_enuerrorstate;
  c6:	89 81       	ldd	r24, Y+1	; 0x01
}
  c8:	0f 90       	pop	r0
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	08 95       	ret

000000d0 <DIO_enuSetportdir>:

ES_ERROR DIO_enuSetportdir(u8 copy_u8portid,u8 copy_u8value){
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	00 d0       	rcall	.+0      	; 0xd6 <DIO_enuSetportdir+0x6>
  d6:	00 d0       	rcall	.+0      	; 0xd8 <DIO_enuSetportdir+0x8>
  d8:	0f 92       	push	r0
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	8a 83       	std	Y+2, r24	; 0x02
  e0:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_NOK;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	89 83       	std	Y+1, r24	; 0x01

	 if( copy_u8portid<=DIO_PORTD){
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	84 30       	cpi	r24, 0x04	; 4
  ea:	a0 f5       	brcc	.+104    	; 0x154 <DIO_enuSetportdir+0x84>
		 switch(copy_u8portid){
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	3d 83       	std	Y+5, r19	; 0x05
  f4:	2c 83       	std	Y+4, r18	; 0x04
  f6:	8c 81       	ldd	r24, Y+4	; 0x04
  f8:	9d 81       	ldd	r25, Y+5	; 0x05
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	91 05       	cpc	r25, r1
  fe:	d1 f0       	breq	.+52     	; 0x134 <DIO_enuSetportdir+0x64>
 100:	2c 81       	ldd	r18, Y+4	; 0x04
 102:	3d 81       	ldd	r19, Y+5	; 0x05
 104:	22 30       	cpi	r18, 0x02	; 2
 106:	31 05       	cpc	r19, r1
 108:	2c f4       	brge	.+10     	; 0x114 <DIO_enuSetportdir+0x44>
 10a:	8c 81       	ldd	r24, Y+4	; 0x04
 10c:	9d 81       	ldd	r25, Y+5	; 0x05
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	61 f0       	breq	.+24     	; 0x12a <DIO_enuSetportdir+0x5a>
 112:	1e c0       	rjmp	.+60     	; 0x150 <DIO_enuSetportdir+0x80>
 114:	2c 81       	ldd	r18, Y+4	; 0x04
 116:	3d 81       	ldd	r19, Y+5	; 0x05
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	81 f0       	breq	.+32     	; 0x13e <DIO_enuSetportdir+0x6e>
 11e:	8c 81       	ldd	r24, Y+4	; 0x04
 120:	9d 81       	ldd	r25, Y+5	; 0x05
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	91 05       	cpc	r25, r1
 126:	81 f0       	breq	.+32     	; 0x148 <DIO_enuSetportdir+0x78>
 128:	13 c0       	rjmp	.+38     	; 0x150 <DIO_enuSetportdir+0x80>
		 case DIO_PORTA :
			DDRA=copy_u8value;
 12a:	ea e3       	ldi	r30, 0x3A	; 58
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	80 83       	st	Z, r24
 132:	0e c0       	rjmp	.+28     	; 0x150 <DIO_enuSetportdir+0x80>
		   break;
		 case DIO_PORTB :
			DDRB=copy_u8value;
 134:	e7 e3       	ldi	r30, 0x37	; 55
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	80 83       	st	Z, r24
 13c:	09 c0       	rjmp	.+18     	; 0x150 <DIO_enuSetportdir+0x80>
			   break;
		 case DIO_PORTC :
			DDRC=copy_u8value;
 13e:	e4 e3       	ldi	r30, 0x34	; 52
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	80 83       	st	Z, r24
 146:	04 c0       	rjmp	.+8      	; 0x150 <DIO_enuSetportdir+0x80>
			   break;
		 case DIO_PORTD :
			DDRD=copy_u8value;
 148:	e1 e3       	ldi	r30, 0x31	; 49
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	80 83       	st	Z, r24
			   break;
		 }
		  local_enuerrorstate=ES_OK;
 150:	19 82       	std	Y+1, r1	; 0x01
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_enuSetportdir+0x88>
	 }
	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	89 83       	std	Y+1, r24	; 0x01

	return local_enuerrorstate;
 158:	89 81       	ldd	r24, Y+1	; 0x01
}
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <DIO_enuSetportval>:



ES_ERROR DIO_enuSetportval(u8 copy_u8portid,u8 copy_u8value){
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	00 d0       	rcall	.+0      	; 0x170 <DIO_enuSetportval+0x6>
 170:	00 d0       	rcall	.+0      	; 0x172 <DIO_enuSetportval+0x8>
 172:	0f 92       	push	r0
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	8a 83       	std	Y+2, r24	; 0x02
 17a:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_NOK;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	89 83       	std	Y+1, r24	; 0x01

	 if( copy_u8portid<=DIO_PORTD){
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	a0 f5       	brcc	.+104    	; 0x1ee <DIO_enuSetportval+0x84>
		 switch(copy_u8portid){
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	3d 83       	std	Y+5, r19	; 0x05
 18e:	2c 83       	std	Y+4, r18	; 0x04
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	9d 81       	ldd	r25, Y+5	; 0x05
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	91 05       	cpc	r25, r1
 198:	d1 f0       	breq	.+52     	; 0x1ce <DIO_enuSetportval+0x64>
 19a:	2c 81       	ldd	r18, Y+4	; 0x04
 19c:	3d 81       	ldd	r19, Y+5	; 0x05
 19e:	22 30       	cpi	r18, 0x02	; 2
 1a0:	31 05       	cpc	r19, r1
 1a2:	2c f4       	brge	.+10     	; 0x1ae <DIO_enuSetportval+0x44>
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	9d 81       	ldd	r25, Y+5	; 0x05
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	61 f0       	breq	.+24     	; 0x1c4 <DIO_enuSetportval+0x5a>
 1ac:	1e c0       	rjmp	.+60     	; 0x1ea <DIO_enuSetportval+0x80>
 1ae:	2c 81       	ldd	r18, Y+4	; 0x04
 1b0:	3d 81       	ldd	r19, Y+5	; 0x05
 1b2:	22 30       	cpi	r18, 0x02	; 2
 1b4:	31 05       	cpc	r19, r1
 1b6:	81 f0       	breq	.+32     	; 0x1d8 <DIO_enuSetportval+0x6e>
 1b8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ba:	9d 81       	ldd	r25, Y+5	; 0x05
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	91 05       	cpc	r25, r1
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <DIO_enuSetportval+0x78>
 1c2:	13 c0       	rjmp	.+38     	; 0x1ea <DIO_enuSetportval+0x80>
		 case DIO_PORTA :
			PORTA=copy_u8value;
 1c4:	eb e3       	ldi	r30, 0x3B	; 59
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	80 83       	st	Z, r24
 1cc:	0e c0       	rjmp	.+28     	; 0x1ea <DIO_enuSetportval+0x80>
		   break;
		 case DIO_PORTB :
			PORTB=copy_u8value;
 1ce:	e8 e3       	ldi	r30, 0x38	; 56
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	80 83       	st	Z, r24
 1d6:	09 c0       	rjmp	.+18     	; 0x1ea <DIO_enuSetportval+0x80>
			   break;
		 case DIO_PORTC :
			PORTC=copy_u8value;
 1d8:	e5 e3       	ldi	r30, 0x35	; 53
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	80 83       	st	Z, r24
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <DIO_enuSetportval+0x80>
			   break;
		 case DIO_PORTD :
			PORTD=copy_u8value;
 1e2:	e2 e3       	ldi	r30, 0x32	; 50
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	80 83       	st	Z, r24
			   break;
		 }
		  local_enuerrorstate=ES_OK;
 1ea:	19 82       	std	Y+1, r1	; 0x01
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_enuSetportval+0x88>
	 }
	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	89 83       	std	Y+1, r24	; 0x01

	return local_enuerrorstate;
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
}
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <DIO_enuSetpindir>:
ES_ERROR DIO_enuSetpindir(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8value){
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	00 d0       	rcall	.+0      	; 0x20a <DIO_enuSetpindir+0x6>
 20a:	00 d0       	rcall	.+0      	; 0x20c <DIO_enuSetpindir+0x8>
 20c:	00 d0       	rcall	.+0      	; 0x20e <DIO_enuSetpindir+0xa>
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	8a 83       	std	Y+2, r24	; 0x02
 214:	6b 83       	std	Y+3, r22	; 0x03
 216:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_NOK;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	89 83       	std	Y+1, r24	; 0x01

if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7&&copy_u8value<=OUTPUT ){
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	84 30       	cpi	r24, 0x04	; 4
 220:	08 f0       	brcs	.+2      	; 0x224 <DIO_enuSetpindir+0x20>
 222:	d4 c0       	rjmp	.+424    	; 0x3cc <DIO_enuSetpindir+0x1c8>
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	88 30       	cpi	r24, 0x08	; 8
 228:	08 f0       	brcs	.+2      	; 0x22c <DIO_enuSetpindir+0x28>
 22a:	d0 c0       	rjmp	.+416    	; 0x3cc <DIO_enuSetpindir+0x1c8>
 22c:	8c 81       	ldd	r24, Y+4	; 0x04
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	08 f0       	brcs	.+2      	; 0x234 <DIO_enuSetpindir+0x30>
 232:	cc c0       	rjmp	.+408    	; 0x3cc <DIO_enuSetpindir+0x1c8>
	 if( copy_u8portid<=DIO_PORTD){
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	08 f0       	brcs	.+2      	; 0x23c <DIO_enuSetpindir+0x38>
 23a:	ca c0       	rjmp	.+404    	; 0x3d0 <DIO_enuSetpindir+0x1cc>
			 switch(copy_u8portid){
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	3e 83       	std	Y+6, r19	; 0x06
 244:	2d 83       	std	Y+5, r18	; 0x05
 246:	6d 81       	ldd	r22, Y+5	; 0x05
 248:	7e 81       	ldd	r23, Y+6	; 0x06
 24a:	61 30       	cpi	r22, 0x01	; 1
 24c:	71 05       	cpc	r23, r1
 24e:	09 f4       	brne	.+2      	; 0x252 <DIO_enuSetpindir+0x4e>
 250:	41 c0       	rjmp	.+130    	; 0x2d4 <DIO_enuSetpindir+0xd0>
 252:	8d 81       	ldd	r24, Y+5	; 0x05
 254:	9e 81       	ldd	r25, Y+6	; 0x06
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	91 05       	cpc	r25, r1
 25a:	34 f4       	brge	.+12     	; 0x268 <DIO_enuSetpindir+0x64>
 25c:	2d 81       	ldd	r18, Y+5	; 0x05
 25e:	3e 81       	ldd	r19, Y+6	; 0x06
 260:	21 15       	cp	r18, r1
 262:	31 05       	cpc	r19, r1
 264:	71 f0       	breq	.+28     	; 0x282 <DIO_enuSetpindir+0x7e>
 266:	b0 c0       	rjmp	.+352    	; 0x3c8 <DIO_enuSetpindir+0x1c4>
 268:	6d 81       	ldd	r22, Y+5	; 0x05
 26a:	7e 81       	ldd	r23, Y+6	; 0x06
 26c:	62 30       	cpi	r22, 0x02	; 2
 26e:	71 05       	cpc	r23, r1
 270:	09 f4       	brne	.+2      	; 0x274 <DIO_enuSetpindir+0x70>
 272:	59 c0       	rjmp	.+178    	; 0x326 <DIO_enuSetpindir+0x122>
 274:	8d 81       	ldd	r24, Y+5	; 0x05
 276:	9e 81       	ldd	r25, Y+6	; 0x06
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	91 05       	cpc	r25, r1
 27c:	09 f4       	brne	.+2      	; 0x280 <DIO_enuSetpindir+0x7c>
 27e:	7c c0       	rjmp	.+248    	; 0x378 <DIO_enuSetpindir+0x174>
 280:	a3 c0       	rjmp	.+326    	; 0x3c8 <DIO_enuSetpindir+0x1c4>
			 case DIO_PORTA :
				DDRA&=~(MASK_BIT<<copy_u8pinid);
 282:	aa e3       	ldi	r26, 0x3A	; 58
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	ea e3       	ldi	r30, 0x3A	; 58
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	48 2f       	mov	r20, r24
 28e:	8b 81       	ldd	r24, Y+3	; 0x03
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_enuSetpindir+0x9a>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	2a 95       	dec	r18
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_enuSetpindir+0x96>
 2a2:	80 95       	com	r24
 2a4:	84 23       	and	r24, r20
 2a6:	8c 93       	st	X, r24
				DDRA|=(copy_u8value<<copy_u8pinid);
 2a8:	aa e3       	ldi	r26, 0x3A	; 58
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	ea e3       	ldi	r30, 0x3A	; 58
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	48 2f       	mov	r20, r24
 2b4:	8c 81       	ldd	r24, Y+4	; 0x04
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	8b 81       	ldd	r24, Y+3	; 0x03
 2bc:	88 2f       	mov	r24, r24
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	b9 01       	movw	r22, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_enuSetpindir+0xc4>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	8a 95       	dec	r24
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_enuSetpindir+0xc0>
 2cc:	cb 01       	movw	r24, r22
 2ce:	84 2b       	or	r24, r20
 2d0:	8c 93       	st	X, r24
 2d2:	7a c0       	rjmp	.+244    	; 0x3c8 <DIO_enuSetpindir+0x1c4>
			   break;
			 case DIO_PORTB :
					DDRB&=~(MASK_BIT<<copy_u8pinid);
 2d4:	a7 e3       	ldi	r26, 0x37	; 55
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e7 e3       	ldi	r30, 0x37	; 55
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	8b 81       	ldd	r24, Y+3	; 0x03
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_enuSetpindir+0xec>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	2a 95       	dec	r18
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_enuSetpindir+0xe8>
 2f4:	80 95       	com	r24
 2f6:	84 23       	and	r24, r20
 2f8:	8c 93       	st	X, r24
				    DDRB|=(copy_u8value<<copy_u8pinid);
 2fa:	a7 e3       	ldi	r26, 0x37	; 55
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e7 e3       	ldi	r30, 0x37	; 55
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	48 2f       	mov	r20, r24
 306:	8c 81       	ldd	r24, Y+4	; 0x04
 308:	28 2f       	mov	r18, r24
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	88 2f       	mov	r24, r24
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	b9 01       	movw	r22, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_enuSetpindir+0x116>
 316:	66 0f       	add	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	8a 95       	dec	r24
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_enuSetpindir+0x112>
 31e:	cb 01       	movw	r24, r22
 320:	84 2b       	or	r24, r20
 322:	8c 93       	st	X, r24
 324:	51 c0       	rjmp	.+162    	; 0x3c8 <DIO_enuSetpindir+0x1c4>
				   break;
			 case DIO_PORTC :
				 DDRC&=~(MASK_BIT<<copy_u8pinid);
 326:	a4 e3       	ldi	r26, 0x34	; 52
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e4 e3       	ldi	r30, 0x34	; 52
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	48 2f       	mov	r20, r24
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	28 2f       	mov	r18, r24
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_enuSetpindir+0x13e>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	2a 95       	dec	r18
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_enuSetpindir+0x13a>
 346:	80 95       	com	r24
 348:	84 23       	and	r24, r20
 34a:	8c 93       	st	X, r24
				 DDRC|=(copy_u8value<<copy_u8pinid);
 34c:	a4 e3       	ldi	r26, 0x34	; 52
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e4 e3       	ldi	r30, 0x34	; 52
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	48 2f       	mov	r20, r24
 358:	8c 81       	ldd	r24, Y+4	; 0x04
 35a:	28 2f       	mov	r18, r24
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	8b 81       	ldd	r24, Y+3	; 0x03
 360:	88 2f       	mov	r24, r24
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	b9 01       	movw	r22, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_enuSetpindir+0x168>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	8a 95       	dec	r24
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_enuSetpindir+0x164>
 370:	cb 01       	movw	r24, r22
 372:	84 2b       	or	r24, r20
 374:	8c 93       	st	X, r24
 376:	28 c0       	rjmp	.+80     	; 0x3c8 <DIO_enuSetpindir+0x1c4>
				   break;
			 case DIO_PORTD :
				 DDRD&=~(MASK_BIT<<copy_u8pinid);
 378:	a1 e3       	ldi	r26, 0x31	; 49
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e1 e3       	ldi	r30, 0x31	; 49
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	48 2f       	mov	r20, r24
 384:	8b 81       	ldd	r24, Y+3	; 0x03
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_enuSetpindir+0x190>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	2a 95       	dec	r18
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_enuSetpindir+0x18c>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
				 DDRD|=(copy_u8value<<copy_u8pinid);
 39e:	a1 e3       	ldi	r26, 0x31	; 49
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e1 e3       	ldi	r30, 0x31	; 49
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	48 2f       	mov	r20, r24
 3aa:	8c 81       	ldd	r24, Y+4	; 0x04
 3ac:	28 2f       	mov	r18, r24
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	88 2f       	mov	r24, r24
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	b9 01       	movw	r22, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_enuSetpindir+0x1ba>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	8a 95       	dec	r24
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_enuSetpindir+0x1b6>
 3c2:	cb 01       	movw	r24, r22
 3c4:	84 2b       	or	r24, r20
 3c6:	8c 93       	st	X, r24
				   break;
			 }
			 local_enuerrorstate=ES_OK;
 3c8:	19 82       	std	Y+1, r1	; 0x01
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_enuSetpindir+0x1cc>
		 }
}
else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
}
 3d2:	26 96       	adiw	r28, 0x06	; 6
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	cd bf       	out	0x3d, r28	; 61
 3de:	cf 91       	pop	r28
 3e0:	df 91       	pop	r29
 3e2:	08 95       	ret

000003e4 <DIO_enuSetpinval>:

ES_ERROR DIO_enuSetpinval(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8value){
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <DIO_enuSetpinval+0x6>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <DIO_enuSetpinval+0x8>
 3ec:	00 d0       	rcall	.+0      	; 0x3ee <DIO_enuSetpinval+0xa>
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	8a 83       	std	Y+2, r24	; 0x02
 3f4:	6b 83       	std	Y+3, r22	; 0x03
 3f6:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_NOK;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7&&copy_u8value<=OUTPUT ){
 3fc:	8a 81       	ldd	r24, Y+2	; 0x02
 3fe:	84 30       	cpi	r24, 0x04	; 4
 400:	08 f0       	brcs	.+2      	; 0x404 <DIO_enuSetpinval+0x20>
 402:	d0 c0       	rjmp	.+416    	; 0x5a4 <DIO_enuSetpinval+0x1c0>
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	88 30       	cpi	r24, 0x08	; 8
 408:	08 f0       	brcs	.+2      	; 0x40c <DIO_enuSetpinval+0x28>
 40a:	cc c0       	rjmp	.+408    	; 0x5a4 <DIO_enuSetpinval+0x1c0>
 40c:	8c 81       	ldd	r24, Y+4	; 0x04
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	08 f0       	brcs	.+2      	; 0x414 <DIO_enuSetpinval+0x30>
 412:	c8 c0       	rjmp	.+400    	; 0x5a4 <DIO_enuSetpinval+0x1c0>

				 switch(copy_u8portid){
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	3e 83       	std	Y+6, r19	; 0x06
 41c:	2d 83       	std	Y+5, r18	; 0x05
 41e:	6d 81       	ldd	r22, Y+5	; 0x05
 420:	7e 81       	ldd	r23, Y+6	; 0x06
 422:	61 30       	cpi	r22, 0x01	; 1
 424:	71 05       	cpc	r23, r1
 426:	09 f4       	brne	.+2      	; 0x42a <DIO_enuSetpinval+0x46>
 428:	41 c0       	rjmp	.+130    	; 0x4ac <DIO_enuSetpinval+0xc8>
 42a:	8d 81       	ldd	r24, Y+5	; 0x05
 42c:	9e 81       	ldd	r25, Y+6	; 0x06
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	91 05       	cpc	r25, r1
 432:	34 f4       	brge	.+12     	; 0x440 <DIO_enuSetpinval+0x5c>
 434:	2d 81       	ldd	r18, Y+5	; 0x05
 436:	3e 81       	ldd	r19, Y+6	; 0x06
 438:	21 15       	cp	r18, r1
 43a:	31 05       	cpc	r19, r1
 43c:	71 f0       	breq	.+28     	; 0x45a <DIO_enuSetpinval+0x76>
 43e:	b0 c0       	rjmp	.+352    	; 0x5a0 <DIO_enuSetpinval+0x1bc>
 440:	6d 81       	ldd	r22, Y+5	; 0x05
 442:	7e 81       	ldd	r23, Y+6	; 0x06
 444:	62 30       	cpi	r22, 0x02	; 2
 446:	71 05       	cpc	r23, r1
 448:	09 f4       	brne	.+2      	; 0x44c <DIO_enuSetpinval+0x68>
 44a:	59 c0       	rjmp	.+178    	; 0x4fe <DIO_enuSetpinval+0x11a>
 44c:	8d 81       	ldd	r24, Y+5	; 0x05
 44e:	9e 81       	ldd	r25, Y+6	; 0x06
 450:	83 30       	cpi	r24, 0x03	; 3
 452:	91 05       	cpc	r25, r1
 454:	09 f4       	brne	.+2      	; 0x458 <DIO_enuSetpinval+0x74>
 456:	7c c0       	rjmp	.+248    	; 0x550 <DIO_enuSetpinval+0x16c>
 458:	a3 c0       	rjmp	.+326    	; 0x5a0 <DIO_enuSetpinval+0x1bc>
				 case DIO_PORTA :
					PORTA&=~(MASK_BIT<<copy_u8pinid);
 45a:	ab e3       	ldi	r26, 0x3B	; 59
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	eb e3       	ldi	r30, 0x3B	; 59
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_enuSetpinval+0x92>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	2a 95       	dec	r18
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_enuSetpinval+0x8e>
 47a:	80 95       	com	r24
 47c:	84 23       	and	r24, r20
 47e:	8c 93       	st	X, r24
					PORTA|=(copy_u8value<<copy_u8pinid);
 480:	ab e3       	ldi	r26, 0x3B	; 59
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	eb e3       	ldi	r30, 0x3B	; 59
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	8c 81       	ldd	r24, Y+4	; 0x04
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	b9 01       	movw	r22, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_enuSetpinval+0xbc>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	8a 95       	dec	r24
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_enuSetpinval+0xb8>
 4a4:	cb 01       	movw	r24, r22
 4a6:	84 2b       	or	r24, r20
 4a8:	8c 93       	st	X, r24
 4aa:	7a c0       	rjmp	.+244    	; 0x5a0 <DIO_enuSetpinval+0x1bc>
				   break;
				 case DIO_PORTB :
						PORTB&=~(MASK_BIT<<copy_u8pinid);
 4ac:	a8 e3       	ldi	r26, 0x38	; 56
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	e8 e3       	ldi	r30, 0x38	; 56
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	48 2f       	mov	r20, r24
 4b8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ba:	28 2f       	mov	r18, r24
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_enuSetpinval+0xe4>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	2a 95       	dec	r18
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_enuSetpinval+0xe0>
 4cc:	80 95       	com	r24
 4ce:	84 23       	and	r24, r20
 4d0:	8c 93       	st	X, r24
					    PORTB|=(copy_u8value<<copy_u8pinid);
 4d2:	a8 e3       	ldi	r26, 0x38	; 56
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e8 e3       	ldi	r30, 0x38	; 56
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	8c 81       	ldd	r24, Y+4	; 0x04
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	8b 81       	ldd	r24, Y+3	; 0x03
 4e6:	88 2f       	mov	r24, r24
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	b9 01       	movw	r22, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_enuSetpinval+0x10e>
 4ee:	66 0f       	add	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	8a 95       	dec	r24
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_enuSetpinval+0x10a>
 4f6:	cb 01       	movw	r24, r22
 4f8:	84 2b       	or	r24, r20
 4fa:	8c 93       	st	X, r24
 4fc:	51 c0       	rjmp	.+162    	; 0x5a0 <DIO_enuSetpinval+0x1bc>
					   break;
				 case DIO_PORTC :
					 PORTC&=~(MASK_BIT<<copy_u8pinid);
 4fe:	a5 e3       	ldi	r26, 0x35	; 53
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	e5 e3       	ldi	r30, 0x35	; 53
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	48 2f       	mov	r20, r24
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	28 2f       	mov	r18, r24
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_enuSetpinval+0x136>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	2a 95       	dec	r18
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_enuSetpinval+0x132>
 51e:	80 95       	com	r24
 520:	84 23       	and	r24, r20
 522:	8c 93       	st	X, r24
					 PORTC|=(copy_u8value<<copy_u8pinid);
 524:	a5 e3       	ldi	r26, 0x35	; 53
 526:	b0 e0       	ldi	r27, 0x00	; 0
 528:	e5 e3       	ldi	r30, 0x35	; 53
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	48 2f       	mov	r20, r24
 530:	8c 81       	ldd	r24, Y+4	; 0x04
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	88 2f       	mov	r24, r24
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	b9 01       	movw	r22, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_enuSetpinval+0x160>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_enuSetpinval+0x15c>
 548:	cb 01       	movw	r24, r22
 54a:	84 2b       	or	r24, r20
 54c:	8c 93       	st	X, r24
 54e:	28 c0       	rjmp	.+80     	; 0x5a0 <DIO_enuSetpinval+0x1bc>
					   break;
				 case DIO_PORTD :
					 PORTD&=~(MASK_BIT<<copy_u8pinid);
 550:	a2 e3       	ldi	r26, 0x32	; 50
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	e2 e3       	ldi	r30, 0x32	; 50
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	48 2f       	mov	r20, r24
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_enuSetpinval+0x188>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	2a 95       	dec	r18
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_enuSetpinval+0x184>
 570:	80 95       	com	r24
 572:	84 23       	and	r24, r20
 574:	8c 93       	st	X, r24
					 PORTD|=(copy_u8value<<copy_u8pinid);
 576:	a2 e3       	ldi	r26, 0x32	; 50
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	e2 e3       	ldi	r30, 0x32	; 50
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	48 2f       	mov	r20, r24
 582:	8c 81       	ldd	r24, Y+4	; 0x04
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	88 2f       	mov	r24, r24
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_enuSetpinval+0x1b2>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_enuSetpinval+0x1ae>
 59a:	cb 01       	movw	r24, r22
 59c:	84 2b       	or	r24, r20
 59e:	8c 93       	st	X, r24
					   break;
				 }
				  local_enuerrorstate=ES_OK;
 5a0:	19 82       	std	Y+1, r1	; 0x01
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_enuSetpinval+0x1c4>

	}
	else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
 5a4:	83 e0       	ldi	r24, 0x03	; 3
 5a6:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
}
 5aa:	26 96       	adiw	r28, 0x06	; 6
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	cf 91       	pop	r28
 5b8:	df 91       	pop	r29
 5ba:	08 95       	ret

000005bc <DIO_enutogport>:

ES_ERROR DIO_enutogport(u8 copy_u8portid){
 5bc:	df 93       	push	r29
 5be:	cf 93       	push	r28
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <DIO_enutogport+0x6>
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <DIO_enutogport+0x8>
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuerrorstate=ES_NOK;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	89 83       	std	Y+1, r24	; 0x01


	 if( copy_u8portid<=DIO_PORTD){
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	84 30       	cpi	r24, 0x04	; 4
 5d2:	08 f0       	brcs	.+2      	; 0x5d6 <DIO_enutogport+0x1a>
 5d4:	40 c0       	rjmp	.+128    	; 0x656 <DIO_enutogport+0x9a>
			 switch(copy_u8portid){
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	28 2f       	mov	r18, r24
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	3c 83       	std	Y+4, r19	; 0x04
 5de:	2b 83       	std	Y+3, r18	; 0x03
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	9c 81       	ldd	r25, Y+4	; 0x04
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	91 05       	cpc	r25, r1
 5e8:	e9 f0       	breq	.+58     	; 0x624 <DIO_enutogport+0x68>
 5ea:	2b 81       	ldd	r18, Y+3	; 0x03
 5ec:	3c 81       	ldd	r19, Y+4	; 0x04
 5ee:	22 30       	cpi	r18, 0x02	; 2
 5f0:	31 05       	cpc	r19, r1
 5f2:	2c f4       	brge	.+10     	; 0x5fe <DIO_enutogport+0x42>
 5f4:	8b 81       	ldd	r24, Y+3	; 0x03
 5f6:	9c 81       	ldd	r25, Y+4	; 0x04
 5f8:	00 97       	sbiw	r24, 0x00	; 0
 5fa:	61 f0       	breq	.+24     	; 0x614 <DIO_enutogport+0x58>
 5fc:	2a c0       	rjmp	.+84     	; 0x652 <DIO_enutogport+0x96>
 5fe:	2b 81       	ldd	r18, Y+3	; 0x03
 600:	3c 81       	ldd	r19, Y+4	; 0x04
 602:	22 30       	cpi	r18, 0x02	; 2
 604:	31 05       	cpc	r19, r1
 606:	b1 f0       	breq	.+44     	; 0x634 <DIO_enutogport+0x78>
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	9c 81       	ldd	r25, Y+4	; 0x04
 60c:	83 30       	cpi	r24, 0x03	; 3
 60e:	91 05       	cpc	r25, r1
 610:	c9 f0       	breq	.+50     	; 0x644 <DIO_enutogport+0x88>
 612:	1f c0       	rjmp	.+62     	; 0x652 <DIO_enutogport+0x96>
			 case DIO_PORTA :
				PORTA=~PORTA;
 614:	ab e3       	ldi	r26, 0x3B	; 59
 616:	b0 e0       	ldi	r27, 0x00	; 0
 618:	eb e3       	ldi	r30, 0x3B	; 59
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	80 95       	com	r24
 620:	8c 93       	st	X, r24
 622:	17 c0       	rjmp	.+46     	; 0x652 <DIO_enutogport+0x96>
			   break;
			 case DIO_PORTB :
				PORTB=~PORTB;
 624:	a8 e3       	ldi	r26, 0x38	; 56
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e8 e3       	ldi	r30, 0x38	; 56
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	80 95       	com	r24
 630:	8c 93       	st	X, r24
 632:	0f c0       	rjmp	.+30     	; 0x652 <DIO_enutogport+0x96>
				   break;
			 case DIO_PORTC :
				PORTC=~PORTC;
 634:	a5 e3       	ldi	r26, 0x35	; 53
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	e5 e3       	ldi	r30, 0x35	; 53
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	80 95       	com	r24
 640:	8c 93       	st	X, r24
 642:	07 c0       	rjmp	.+14     	; 0x652 <DIO_enutogport+0x96>
				   break;
			 case DIO_PORTD :
				PORTD=~PORTD;
 644:	a2 e3       	ldi	r26, 0x32	; 50
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	e2 e3       	ldi	r30, 0x32	; 50
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	80 95       	com	r24
 650:	8c 93       	st	X, r24
				   break;
			 }
			  local_enuerrorstate=ES_OK;
 652:	19 82       	std	Y+1, r1	; 0x01
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_enutogport+0x9e>
		 }
		 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
 656:	83 e0       	ldi	r24, 0x03	; 3
 658:	89 83       	std	Y+1, r24	; 0x01


		return local_enuerrorstate;
 65a:	89 81       	ldd	r24, Y+1	; 0x01
}
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	cf 91       	pop	r28
 666:	df 91       	pop	r29
 668:	08 95       	ret

0000066a <DIO_enutogpin>:

ES_ERROR DIO_enutogpin(u8 copy_u8portid,u8 copy_u8pinid){
 66a:	df 93       	push	r29
 66c:	cf 93       	push	r28
 66e:	00 d0       	rcall	.+0      	; 0x670 <DIO_enutogpin+0x6>
 670:	00 d0       	rcall	.+0      	; 0x672 <DIO_enutogpin+0x8>
 672:	0f 92       	push	r0
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	8a 83       	std	Y+2, r24	; 0x02
 67a:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_OK;
 67c:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7 ){
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	84 30       	cpi	r24, 0x04	; 4
 682:	08 f0       	brcs	.+2      	; 0x686 <DIO_enutogpin+0x1c>
 684:	74 c0       	rjmp	.+232    	; 0x76e <DIO_enutogpin+0x104>
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	88 30       	cpi	r24, 0x08	; 8
 68a:	08 f0       	brcs	.+2      	; 0x68e <DIO_enutogpin+0x24>
 68c:	70 c0       	rjmp	.+224    	; 0x76e <DIO_enutogpin+0x104>

					 switch(copy_u8portid){
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	28 2f       	mov	r18, r24
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	3d 83       	std	Y+5, r19	; 0x05
 696:	2c 83       	std	Y+4, r18	; 0x04
 698:	8c 81       	ldd	r24, Y+4	; 0x04
 69a:	9d 81       	ldd	r25, Y+5	; 0x05
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	91 05       	cpc	r25, r1
 6a0:	49 f1       	breq	.+82     	; 0x6f4 <DIO_enutogpin+0x8a>
 6a2:	2c 81       	ldd	r18, Y+4	; 0x04
 6a4:	3d 81       	ldd	r19, Y+5	; 0x05
 6a6:	22 30       	cpi	r18, 0x02	; 2
 6a8:	31 05       	cpc	r19, r1
 6aa:	2c f4       	brge	.+10     	; 0x6b6 <DIO_enutogpin+0x4c>
 6ac:	8c 81       	ldd	r24, Y+4	; 0x04
 6ae:	9d 81       	ldd	r25, Y+5	; 0x05
 6b0:	00 97       	sbiw	r24, 0x00	; 0
 6b2:	61 f0       	breq	.+24     	; 0x6cc <DIO_enutogpin+0x62>
 6b4:	5a c0       	rjmp	.+180    	; 0x76a <DIO_enutogpin+0x100>
 6b6:	2c 81       	ldd	r18, Y+4	; 0x04
 6b8:	3d 81       	ldd	r19, Y+5	; 0x05
 6ba:	22 30       	cpi	r18, 0x02	; 2
 6bc:	31 05       	cpc	r19, r1
 6be:	71 f1       	breq	.+92     	; 0x71c <DIO_enutogpin+0xb2>
 6c0:	8c 81       	ldd	r24, Y+4	; 0x04
 6c2:	9d 81       	ldd	r25, Y+5	; 0x05
 6c4:	83 30       	cpi	r24, 0x03	; 3
 6c6:	91 05       	cpc	r25, r1
 6c8:	e9 f1       	breq	.+122    	; 0x744 <DIO_enutogpin+0xda>
 6ca:	4f c0       	rjmp	.+158    	; 0x76a <DIO_enutogpin+0x100>
					 case DIO_PORTA :
						PORTA^=(MASK_BIT<<copy_u8pinid);
 6cc:	ab e3       	ldi	r26, 0x3B	; 59
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	eb e3       	ldi	r30, 0x3B	; 59
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	48 2f       	mov	r20, r24
 6d8:	8b 81       	ldd	r24, Y+3	; 0x03
 6da:	28 2f       	mov	r18, r24
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 2e       	mov	r0, r18
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_enutogpin+0x80>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	0a 94       	dec	r0
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_enutogpin+0x7c>
 6ee:	84 27       	eor	r24, r20
 6f0:	8c 93       	st	X, r24
 6f2:	3b c0       	rjmp	.+118    	; 0x76a <DIO_enutogpin+0x100>

					   break;
					 case DIO_PORTB :
						 PORTB^=(MASK_BIT<<copy_u8pinid);
 6f4:	a8 e3       	ldi	r26, 0x38	; 56
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e8 e3       	ldi	r30, 0x38	; 56
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	48 2f       	mov	r20, r24
 700:	8b 81       	ldd	r24, Y+3	; 0x03
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 2e       	mov	r0, r18
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_enutogpin+0xa8>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	0a 94       	dec	r0
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_enutogpin+0xa4>
 716:	84 27       	eor	r24, r20
 718:	8c 93       	st	X, r24
 71a:	27 c0       	rjmp	.+78     	; 0x76a <DIO_enutogpin+0x100>
						   break;
					 case DIO_PORTC :
						 PORTC^=(MASK_BIT<<copy_u8pinid);
 71c:	a5 e3       	ldi	r26, 0x35	; 53
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	e5 e3       	ldi	r30, 0x35	; 53
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	48 2f       	mov	r20, r24
 728:	8b 81       	ldd	r24, Y+3	; 0x03
 72a:	28 2f       	mov	r18, r24
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	02 2e       	mov	r0, r18
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_enutogpin+0xd0>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	0a 94       	dec	r0
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_enutogpin+0xcc>
 73e:	84 27       	eor	r24, r20
 740:	8c 93       	st	X, r24
 742:	13 c0       	rjmp	.+38     	; 0x76a <DIO_enutogpin+0x100>
						   break;
					 case DIO_PORTD :
						 PORTD^=(MASK_BIT<<copy_u8pinid);
 744:	a2 e3       	ldi	r26, 0x32	; 50
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	e2 e3       	ldi	r30, 0x32	; 50
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	48 2f       	mov	r20, r24
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 2e       	mov	r0, r18
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_enutogpin+0xf8>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	0a 94       	dec	r0
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_enutogpin+0xf4>
 766:	84 27       	eor	r24, r20
 768:	8c 93       	st	X, r24
						   break;
					 }
					  local_enuerrorstate=ES_OK;
 76a:	19 82       	std	Y+1, r1	; 0x01
 76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_enutogpin+0x108>
				 }

		else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	89 83       	std	Y+1, r24	; 0x01


		return local_enuerrorstate;
 772:	89 81       	ldd	r24, Y+1	; 0x01
}
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	cf 91       	pop	r28
 780:	df 91       	pop	r29
 782:	08 95       	ret

00000784 <DIO_enugetportval>:

ES_ERROR DIO_enugetportval(u8 copy_u8portid,u8* copy_pu8value){
 784:	df 93       	push	r29
 786:	cf 93       	push	r28
 788:	00 d0       	rcall	.+0      	; 0x78a <DIO_enugetportval+0x6>
 78a:	00 d0       	rcall	.+0      	; 0x78c <DIO_enugetportval+0x8>
 78c:	00 d0       	rcall	.+0      	; 0x78e <DIO_enugetportval+0xa>
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
 792:	8a 83       	std	Y+2, r24	; 0x02
 794:	7c 83       	std	Y+4, r23	; 0x04
 796:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_OK;
 798:	19 82       	std	Y+1, r1	; 0x01
 if(copy_pu8value!=NULL){
 79a:	8b 81       	ldd	r24, Y+3	; 0x03
 79c:	9c 81       	ldd	r25, Y+4	; 0x04
 79e:	00 97       	sbiw	r24, 0x00	; 0
 7a0:	09 f4       	brne	.+2      	; 0x7a4 <DIO_enugetportval+0x20>
 7a2:	42 c0       	rjmp	.+132    	; 0x828 <DIO_enugetportval+0xa4>
	 if( copy_u8portid<=DIO_PORTD){
 7a4:	8a 81       	ldd	r24, Y+2	; 0x02
 7a6:	84 30       	cpi	r24, 0x04	; 4
 7a8:	e0 f5       	brcc	.+120    	; 0x822 <DIO_enugetportval+0x9e>
	 		 switch(copy_u8portid){
 7aa:	8a 81       	ldd	r24, Y+2	; 0x02
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	3e 83       	std	Y+6, r19	; 0x06
 7b2:	2d 83       	std	Y+5, r18	; 0x05
 7b4:	8d 81       	ldd	r24, Y+5	; 0x05
 7b6:	9e 81       	ldd	r25, Y+6	; 0x06
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	91 05       	cpc	r25, r1
 7bc:	e1 f0       	breq	.+56     	; 0x7f6 <DIO_enugetportval+0x72>
 7be:	2d 81       	ldd	r18, Y+5	; 0x05
 7c0:	3e 81       	ldd	r19, Y+6	; 0x06
 7c2:	22 30       	cpi	r18, 0x02	; 2
 7c4:	31 05       	cpc	r19, r1
 7c6:	2c f4       	brge	.+10     	; 0x7d2 <DIO_enugetportval+0x4e>
 7c8:	8d 81       	ldd	r24, Y+5	; 0x05
 7ca:	9e 81       	ldd	r25, Y+6	; 0x06
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	61 f0       	breq	.+24     	; 0x7e8 <DIO_enugetportval+0x64>
 7d0:	26 c0       	rjmp	.+76     	; 0x81e <DIO_enugetportval+0x9a>
 7d2:	2d 81       	ldd	r18, Y+5	; 0x05
 7d4:	3e 81       	ldd	r19, Y+6	; 0x06
 7d6:	22 30       	cpi	r18, 0x02	; 2
 7d8:	31 05       	cpc	r19, r1
 7da:	a1 f0       	breq	.+40     	; 0x804 <DIO_enugetportval+0x80>
 7dc:	8d 81       	ldd	r24, Y+5	; 0x05
 7de:	9e 81       	ldd	r25, Y+6	; 0x06
 7e0:	83 30       	cpi	r24, 0x03	; 3
 7e2:	91 05       	cpc	r25, r1
 7e4:	b1 f0       	breq	.+44     	; 0x812 <DIO_enugetportval+0x8e>
 7e6:	1b c0       	rjmp	.+54     	; 0x81e <DIO_enugetportval+0x9a>
	 		 case DIO_PORTA :
	 			* copy_pu8value=PINA;
 7e8:	e9 e3       	ldi	r30, 0x39	; 57
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	eb 81       	ldd	r30, Y+3	; 0x03
 7f0:	fc 81       	ldd	r31, Y+4	; 0x04
 7f2:	80 83       	st	Z, r24
 7f4:	14 c0       	rjmp	.+40     	; 0x81e <DIO_enugetportval+0x9a>
	 		   break;
	 		 case DIO_PORTB :
	 			* copy_pu8value=PINB;
 7f6:	e6 e3       	ldi	r30, 0x36	; 54
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	eb 81       	ldd	r30, Y+3	; 0x03
 7fe:	fc 81       	ldd	r31, Y+4	; 0x04
 800:	80 83       	st	Z, r24
 802:	0d c0       	rjmp	.+26     	; 0x81e <DIO_enugetportval+0x9a>
	 			   break;
	 		 case DIO_PORTC :
	 			* copy_pu8value=PINC;
 804:	e3 e3       	ldi	r30, 0x33	; 51
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	eb 81       	ldd	r30, Y+3	; 0x03
 80c:	fc 81       	ldd	r31, Y+4	; 0x04
 80e:	80 83       	st	Z, r24
 810:	06 c0       	rjmp	.+12     	; 0x81e <DIO_enugetportval+0x9a>
	 			   break;
	 		 case DIO_PORTD :
	 			* copy_pu8value=PIND;
 812:	e0 e3       	ldi	r30, 0x30	; 48
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	eb 81       	ldd	r30, Y+3	; 0x03
 81a:	fc 81       	ldd	r31, Y+4	; 0x04
 81c:	80 83       	st	Z, r24
	 			   break;
	 		 }
	 		  local_enuerrorstate=ES_OK;
 81e:	19 82       	std	Y+1, r1	; 0x01
 820:	05 c0       	rjmp	.+10     	; 0x82c <DIO_enugetportval+0xa8>
	 	 }
	 	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
 822:	83 e0       	ldi	r24, 0x03	; 3
 824:	89 83       	std	Y+1, r24	; 0x01
 826:	02 c0       	rjmp	.+4      	; 0x82c <DIO_enugetportval+0xa8>

	}


 else{
	 local_enuerrorstate=ES_NULL_POINTER;
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	89 83       	std	Y+1, r24	; 0x01
 }


		return local_enuerrorstate;
 82c:	89 81       	ldd	r24, Y+1	; 0x01
}
 82e:	26 96       	adiw	r28, 0x06	; 6
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	f8 94       	cli
 834:	de bf       	out	0x3e, r29	; 62
 836:	0f be       	out	0x3f, r0	; 63
 838:	cd bf       	out	0x3d, r28	; 61
 83a:	cf 91       	pop	r28
 83c:	df 91       	pop	r29
 83e:	08 95       	ret

00000840 <DIO_enugetpinval>:

ES_ERROR DIO_enugetpinval(u8 copy_u8portid,u8 copy_u8pinid,u8* copy_pu8value){
 840:	df 93       	push	r29
 842:	cf 93       	push	r28
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	27 97       	sbiw	r28, 0x07	; 7
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	f8 94       	cli
 84e:	de bf       	out	0x3e, r29	; 62
 850:	0f be       	out	0x3f, r0	; 63
 852:	cd bf       	out	0x3d, r28	; 61
 854:	8a 83       	std	Y+2, r24	; 0x02
 856:	6b 83       	std	Y+3, r22	; 0x03
 858:	5d 83       	std	Y+5, r21	; 0x05
 85a:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_OK;
 85c:	19 82       	std	Y+1, r1	; 0x01
	 if(copy_pu8value!=NULL){
 85e:	8c 81       	ldd	r24, Y+4	; 0x04
 860:	9d 81       	ldd	r25, Y+5	; 0x05
 862:	00 97       	sbiw	r24, 0x00	; 0
 864:	09 f4       	brne	.+2      	; 0x868 <__stack+0x9>
 866:	7d c0       	rjmp	.+250    	; 0x962 <__stack+0x103>
	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7 ){
 868:	8a 81       	ldd	r24, Y+2	; 0x02
 86a:	84 30       	cpi	r24, 0x04	; 4
 86c:	08 f0       	brcs	.+2      	; 0x870 <__stack+0x11>
 86e:	76 c0       	rjmp	.+236    	; 0x95c <__stack+0xfd>
 870:	8b 81       	ldd	r24, Y+3	; 0x03
 872:	88 30       	cpi	r24, 0x08	; 8
 874:	08 f0       	brcs	.+2      	; 0x878 <__stack+0x19>
 876:	72 c0       	rjmp	.+228    	; 0x95c <__stack+0xfd>

				 switch(copy_u8portid){
 878:	8a 81       	ldd	r24, Y+2	; 0x02
 87a:	28 2f       	mov	r18, r24
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	3f 83       	std	Y+7, r19	; 0x07
 880:	2e 83       	std	Y+6, r18	; 0x06
 882:	4e 81       	ldd	r20, Y+6	; 0x06
 884:	5f 81       	ldd	r21, Y+7	; 0x07
 886:	41 30       	cpi	r20, 0x01	; 1
 888:	51 05       	cpc	r21, r1
 88a:	59 f1       	breq	.+86     	; 0x8e2 <__stack+0x83>
 88c:	8e 81       	ldd	r24, Y+6	; 0x06
 88e:	9f 81       	ldd	r25, Y+7	; 0x07
 890:	82 30       	cpi	r24, 0x02	; 2
 892:	91 05       	cpc	r25, r1
 894:	34 f4       	brge	.+12     	; 0x8a2 <__stack+0x43>
 896:	2e 81       	ldd	r18, Y+6	; 0x06
 898:	3f 81       	ldd	r19, Y+7	; 0x07
 89a:	21 15       	cp	r18, r1
 89c:	31 05       	cpc	r19, r1
 89e:	69 f0       	breq	.+26     	; 0x8ba <__stack+0x5b>
 8a0:	5b c0       	rjmp	.+182    	; 0x958 <__stack+0xf9>
 8a2:	4e 81       	ldd	r20, Y+6	; 0x06
 8a4:	5f 81       	ldd	r21, Y+7	; 0x07
 8a6:	42 30       	cpi	r20, 0x02	; 2
 8a8:	51 05       	cpc	r21, r1
 8aa:	79 f1       	breq	.+94     	; 0x90a <__stack+0xab>
 8ac:	8e 81       	ldd	r24, Y+6	; 0x06
 8ae:	9f 81       	ldd	r25, Y+7	; 0x07
 8b0:	83 30       	cpi	r24, 0x03	; 3
 8b2:	91 05       	cpc	r25, r1
 8b4:	09 f4       	brne	.+2      	; 0x8b8 <__stack+0x59>
 8b6:	3d c0       	rjmp	.+122    	; 0x932 <__stack+0xd3>
 8b8:	4f c0       	rjmp	.+158    	; 0x958 <__stack+0xf9>
				 case DIO_PORTA :
					 * copy_pu8value=	(PINA>>copy_u8pinid)&MASK_BIT;
 8ba:	e9 e3       	ldi	r30, 0x39	; 57
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	28 2f       	mov	r18, r24
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	8b 81       	ldd	r24, Y+3	; 0x03
 8c6:	88 2f       	mov	r24, r24
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	a9 01       	movw	r20, r18
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <__stack+0x73>
 8ce:	55 95       	asr	r21
 8d0:	47 95       	ror	r20
 8d2:	8a 95       	dec	r24
 8d4:	e2 f7       	brpl	.-8      	; 0x8ce <__stack+0x6f>
 8d6:	ca 01       	movw	r24, r20
 8d8:	81 70       	andi	r24, 0x01	; 1
 8da:	ec 81       	ldd	r30, Y+4	; 0x04
 8dc:	fd 81       	ldd	r31, Y+5	; 0x05
 8de:	80 83       	st	Z, r24
 8e0:	3b c0       	rjmp	.+118    	; 0x958 <__stack+0xf9>
				   break;
				 case DIO_PORTB :
					 * copy_pu8value=	(PINB>>copy_u8pinid)&MASK_BIT;
 8e2:	e6 e3       	ldi	r30, 0x36	; 54
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	28 2f       	mov	r18, r24
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	8b 81       	ldd	r24, Y+3	; 0x03
 8ee:	88 2f       	mov	r24, r24
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	a9 01       	movw	r20, r18
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__stack+0x9b>
 8f6:	55 95       	asr	r21
 8f8:	47 95       	ror	r20
 8fa:	8a 95       	dec	r24
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__stack+0x97>
 8fe:	ca 01       	movw	r24, r20
 900:	81 70       	andi	r24, 0x01	; 1
 902:	ec 81       	ldd	r30, Y+4	; 0x04
 904:	fd 81       	ldd	r31, Y+5	; 0x05
 906:	80 83       	st	Z, r24
 908:	27 c0       	rjmp	.+78     	; 0x958 <__stack+0xf9>
					   break;
				 case DIO_PORTC :
					 * copy_pu8value=	(PINC>>copy_u8pinid)&MASK_BIT;
 90a:	e3 e3       	ldi	r30, 0x33	; 51
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	28 2f       	mov	r18, r24
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	8b 81       	ldd	r24, Y+3	; 0x03
 916:	88 2f       	mov	r24, r24
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	a9 01       	movw	r20, r18
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0xc3>
 91e:	55 95       	asr	r21
 920:	47 95       	ror	r20
 922:	8a 95       	dec	r24
 924:	e2 f7       	brpl	.-8      	; 0x91e <__stack+0xbf>
 926:	ca 01       	movw	r24, r20
 928:	81 70       	andi	r24, 0x01	; 1
 92a:	ec 81       	ldd	r30, Y+4	; 0x04
 92c:	fd 81       	ldd	r31, Y+5	; 0x05
 92e:	80 83       	st	Z, r24
 930:	13 c0       	rjmp	.+38     	; 0x958 <__stack+0xf9>
					   break;
				 case DIO_PORTD :
					 * copy_pu8value=	(PIND>>copy_u8pinid)&MASK_BIT;
 932:	e0 e3       	ldi	r30, 0x30	; 48
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	80 81       	ld	r24, Z
 938:	28 2f       	mov	r18, r24
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	8b 81       	ldd	r24, Y+3	; 0x03
 93e:	88 2f       	mov	r24, r24
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	a9 01       	movw	r20, r18
 944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0xeb>
 946:	55 95       	asr	r21
 948:	47 95       	ror	r20
 94a:	8a 95       	dec	r24
 94c:	e2 f7       	brpl	.-8      	; 0x946 <__stack+0xe7>
 94e:	ca 01       	movw	r24, r20
 950:	81 70       	andi	r24, 0x01	; 1
 952:	ec 81       	ldd	r30, Y+4	; 0x04
 954:	fd 81       	ldd	r31, Y+5	; 0x05
 956:	80 83       	st	Z, r24
					   break;
				 }
				  local_enuerrorstate=ES_OK;
 958:	19 82       	std	Y+1, r1	; 0x01
 95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
			 }

	else  {local_enuerrorstate=ES_OUT_OF_RANGE;}}
 95c:	83 e0       	ldi	r24, 0x03	; 3
 95e:	89 83       	std	Y+1, r24	; 0x01
 960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x107>
	else local_enuerrorstate=ES_NULL_POINTER;
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
 966:	89 81       	ldd	r24, Y+1	; 0x01
}
 968:	27 96       	adiw	r28, 0x07	; 7
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	f8 94       	cli
 96e:	de bf       	out	0x3e, r29	; 62
 970:	0f be       	out	0x3f, r0	; 63
 972:	cd bf       	out	0x3d, r28	; 61
 974:	cf 91       	pop	r28
 976:	df 91       	pop	r29
 978:	08 95       	ret

0000097a <EXIT_enuInit>:
#include"EXIT_priv.h"
#include"EXIT_cofig.h"

void(*callBakPointer[3])(void)={NULL};

ES_ERROR EXIT_enuInit(){
 97a:	df 93       	push	r29
 97c:	cf 93       	push	r28
 97e:	0f 92       	push	r0
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
	ES_ERROR error_state=ES_OK;
 984:	19 82       	std	Y+1, r1	; 0x01
	  DIO_enuSetpinval(MCUCSR_REG,DIO_u8PIN6,DIO_u8HIGH);    DIO_enuSetpinval(MCUCR_REG,DIO_u8PIN3,DIO_u8HIGH);
#else
	  #error " EXIT_SENSE_MODE wrong option"
#endif
#endif
	return error_state;
 986:	89 81       	ldd	r24, Y+1	; 0x01
}
 988:	0f 90       	pop	r0
 98a:	cf 91       	pop	r28
 98c:	df 91       	pop	r29
 98e:	08 95       	ret

00000990 <EXIT_enuEnaleINT>:


ES_ERROR EXIT_enuEnaleINT(u8 copy_u8Line){
 990:	df 93       	push	r29
 992:	cf 93       	push	r28
 994:	00 d0       	rcall	.+0      	; 0x996 <EXIT_enuEnaleINT+0x6>
 996:	cd b7       	in	r28, 0x3d	; 61
 998:	de b7       	in	r29, 0x3e	; 62
 99a:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR error_state=ES_NOK;
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	89 83       	std	Y+1, r24	; 0x01
	if ( (copy_u8Line>LINE2) && (copy_u8Line<LINE1) ){
 9a0:	8a 81       	ldd	r24, Y+2	; 0x02
 9a2:	86 30       	cpi	r24, 0x06	; 6
 9a4:	58 f0       	brcs	.+22     	; 0x9bc <EXIT_enuEnaleINT+0x2c>
 9a6:	8a 81       	ldd	r24, Y+2	; 0x02
 9a8:	87 30       	cpi	r24, 0x07	; 7
 9aa:	40 f4       	brcc	.+16     	; 0x9bc <EXIT_enuEnaleINT+0x2c>
DIO_enuSetpinval(GICR_REG ,copy_u8Line,DIO_u8HIGH);
 9ac:	eb e5       	ldi	r30, 0x5B	; 91
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	6a 81       	ldd	r22, Y+2	; 0x02
 9b4:	41 e0       	ldi	r20, 0x01	; 1
 9b6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
error_state=ES_OK;
 9ba:	19 82       	std	Y+1, r1	; 0x01
	}

		return error_state;
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
}
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	cf 91       	pop	r28
 9c4:	df 91       	pop	r29
 9c6:	08 95       	ret

000009c8 <EXIT_enuDisableINT>:


ES_ERROR EXIT_enuDisableINT(u8 copy_u8Line){
 9c8:	df 93       	push	r29
 9ca:	cf 93       	push	r28
 9cc:	00 d0       	rcall	.+0      	; 0x9ce <EXIT_enuDisableINT+0x6>
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
 9d2:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR error_state=ES_NOK;
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	89 83       	std	Y+1, r24	; 0x01

	if ( (copy_u8Line>LINE2) && (copy_u8Line<LINE1) ){
 9d8:	8a 81       	ldd	r24, Y+2	; 0x02
 9da:	86 30       	cpi	r24, 0x06	; 6
 9dc:	58 f0       	brcs	.+22     	; 0x9f4 <EXIT_enuDisableINT+0x2c>
 9de:	8a 81       	ldd	r24, Y+2	; 0x02
 9e0:	87 30       	cpi	r24, 0x07	; 7
 9e2:	40 f4       	brcc	.+16     	; 0x9f4 <EXIT_enuDisableINT+0x2c>
	DIO_enuSetpinval(GICR_REG ,copy_u8Line,DIO_u8LOW);
 9e4:	eb e5       	ldi	r30, 0x5B	; 91
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	80 81       	ld	r24, Z
 9ea:	6a 81       	ldd	r22, Y+2	; 0x02
 9ec:	40 e0       	ldi	r20, 0x00	; 0
 9ee:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
	error_state=ES_OK;
 9f2:	19 82       	std	Y+1, r1	; 0x01
		}

		return error_state;
 9f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 9f6:	0f 90       	pop	r0
 9f8:	0f 90       	pop	r0
 9fa:	cf 91       	pop	r28
 9fc:	df 91       	pop	r29
 9fe:	08 95       	ret

00000a00 <EXIT_enuClearFlag>:


ES_ERROR EXIT_enuClearFlag(u8 copy_u8Line){
 a00:	df 93       	push	r29
 a02:	cf 93       	push	r28
 a04:	00 d0       	rcall	.+0      	; 0xa06 <EXIT_enuClearFlag+0x6>
 a06:	cd b7       	in	r28, 0x3d	; 61
 a08:	de b7       	in	r29, 0x3e	; 62
 a0a:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR error_state=ES_NOK;
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	89 83       	std	Y+1, r24	; 0x01
	if ( (copy_u8Line>LINE2) && (copy_u8Line<LINE1) ){
 a10:	8a 81       	ldd	r24, Y+2	; 0x02
 a12:	86 30       	cpi	r24, 0x06	; 6
 a14:	58 f0       	brcs	.+22     	; 0xa2c <EXIT_enuClearFlag+0x2c>
 a16:	8a 81       	ldd	r24, Y+2	; 0x02
 a18:	87 30       	cpi	r24, 0x07	; 7
 a1a:	40 f4       	brcc	.+16     	; 0xa2c <EXIT_enuClearFlag+0x2c>
	DIO_enuSetpinval(GIFR_REG ,copy_u8Line,DIO_u8HIGH);
 a1c:	ea e5       	ldi	r30, 0x5A	; 90
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	80 81       	ld	r24, Z
 a22:	6a 81       	ldd	r22, Y+2	; 0x02
 a24:	41 e0       	ldi	r20, 0x01	; 1
 a26:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
	error_state=ES_OK;
 a2a:	19 82       	std	Y+1, r1	; 0x01
		}

		return error_state;
 a2c:	89 81       	ldd	r24, Y+1	; 0x01
}
 a2e:	0f 90       	pop	r0
 a30:	0f 90       	pop	r0
 a32:	cf 91       	pop	r28
 a34:	df 91       	pop	r29
 a36:	08 95       	ret

00000a38 <EXIT_enuSetCallBack>:


ES_ERROR EXIT_enuSetCallBack(void(*copy_pSetCllBack)(void),u8 copy_u8Line){
 a38:	df 93       	push	r29
 a3a:	cf 93       	push	r28
 a3c:	00 d0       	rcall	.+0      	; 0xa3e <EXIT_enuSetCallBack+0x6>
 a3e:	00 d0       	rcall	.+0      	; 0xa40 <EXIT_enuSetCallBack+0x8>
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
 a44:	9b 83       	std	Y+3, r25	; 0x03
 a46:	8a 83       	std	Y+2, r24	; 0x02
 a48:	6c 83       	std	Y+4, r22	; 0x04
	ES_ERROR error_state=ES_OK;
 a4a:	19 82       	std	Y+1, r1	; 0x01
 if(copy_pSetCllBack)
 a4c:	8a 81       	ldd	r24, Y+2	; 0x02
 a4e:	9b 81       	ldd	r25, Y+3	; 0x03
 a50:	00 97       	sbiw	r24, 0x00	; 0
 a52:	69 f0       	breq	.+26     	; 0xa6e <EXIT_enuSetCallBack+0x36>
	callBakPointer[copy_u8Line]=copy_pSetCllBack;
 a54:	8c 81       	ldd	r24, Y+4	; 0x04
 a56:	88 2f       	mov	r24, r24
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	88 0f       	add	r24, r24
 a5c:	99 1f       	adc	r25, r25
 a5e:	fc 01       	movw	r30, r24
 a60:	e0 5a       	subi	r30, 0xA0	; 160
 a62:	ff 4f       	sbci	r31, 0xFF	; 255
 a64:	8a 81       	ldd	r24, Y+2	; 0x02
 a66:	9b 81       	ldd	r25, Y+3	; 0x03
 a68:	91 83       	std	Z+1, r25	; 0x01
 a6a:	80 83       	st	Z, r24
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <EXIT_enuSetCallBack+0x3a>

 else error_state=ES_NULL_POINTER;
 a6e:	82 e0       	ldi	r24, 0x02	; 2
 a70:	89 83       	std	Y+1, r24	; 0x01

		return error_state;
 a72:	89 81       	ldd	r24, Y+1	; 0x01
}
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	cf 91       	pop	r28
 a7e:	df 91       	pop	r29
 a80:	08 95       	ret

00000a82 <EXIT_enuSetSignalLatch>:
ES_ERROR EXIT_enuSetSignalLatch(u8 copy_u8Line,u8 copy_u8senseMode ){
 a82:	df 93       	push	r29
 a84:	cf 93       	push	r28
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	28 97       	sbiw	r28, 0x08	; 8
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	f8 94       	cli
 a90:	de bf       	out	0x3e, r29	; 62
 a92:	0f be       	out	0x3f, r0	; 63
 a94:	cd bf       	out	0x3d, r28	; 61
 a96:	8b 83       	std	Y+3, r24	; 0x03
 a98:	6c 83       	std	Y+4, r22	; 0x04
	ES_ERROR error_state=ES_OK;
 a9a:	1a 82       	std	Y+2, r1	; 0x02
if(copy_u8Line==LINE0 ||copy_u8Line==LINE1){
 a9c:	8b 81       	ldd	r24, Y+3	; 0x03
 a9e:	86 30       	cpi	r24, 0x06	; 6
 aa0:	21 f0       	breq	.+8      	; 0xaaa <EXIT_enuSetSignalLatch+0x28>
 aa2:	8b 81       	ldd	r24, Y+3	; 0x03
 aa4:	87 30       	cpi	r24, 0x07	; 7
 aa6:	09 f0       	breq	.+2      	; 0xaaa <EXIT_enuSetSignalLatch+0x28>
 aa8:	73 c0       	rjmp	.+230    	; 0xb90 <EXIT_enuSetSignalLatch+0x10e>
	u8 local_u8Line=copy_u8Line-6;
 aaa:	8b 81       	ldd	r24, Y+3	; 0x03
 aac:	86 50       	subi	r24, 0x06	; 6
 aae:	89 83       	std	Y+1, r24	; 0x01

	switch(copy_u8senseMode){
 ab0:	8c 81       	ldd	r24, Y+4	; 0x04
 ab2:	28 2f       	mov	r18, r24
 ab4:	30 e0       	ldi	r19, 0x00	; 0
 ab6:	38 87       	std	Y+8, r19	; 0x08
 ab8:	2f 83       	std	Y+7, r18	; 0x07
 aba:	8f 81       	ldd	r24, Y+7	; 0x07
 abc:	98 85       	ldd	r25, Y+8	; 0x08
 abe:	81 30       	cpi	r24, 0x01	; 1
 ac0:	91 05       	cpc	r25, r1
 ac2:	69 f1       	breq	.+90     	; 0xb1e <EXIT_enuSetSignalLatch+0x9c>
 ac4:	2f 81       	ldd	r18, Y+7	; 0x07
 ac6:	38 85       	ldd	r19, Y+8	; 0x08
 ac8:	22 30       	cpi	r18, 0x02	; 2
 aca:	31 05       	cpc	r19, r1
 acc:	2c f4       	brge	.+10     	; 0xad8 <EXIT_enuSetSignalLatch+0x56>
 ace:	8f 81       	ldd	r24, Y+7	; 0x07
 ad0:	98 85       	ldd	r25, Y+8	; 0x08
 ad2:	00 97       	sbiw	r24, 0x00	; 0
 ad4:	69 f0       	breq	.+26     	; 0xaf0 <EXIT_enuSetSignalLatch+0x6e>
 ad6:	85 c0       	rjmp	.+266    	; 0xbe2 <EXIT_enuSetSignalLatch+0x160>
 ad8:	2f 81       	ldd	r18, Y+7	; 0x07
 ada:	38 85       	ldd	r19, Y+8	; 0x08
 adc:	22 30       	cpi	r18, 0x02	; 2
 ade:	31 05       	cpc	r19, r1
 ae0:	89 f1       	breq	.+98     	; 0xb44 <EXIT_enuSetSignalLatch+0xc2>
 ae2:	8f 81       	ldd	r24, Y+7	; 0x07
 ae4:	98 85       	ldd	r25, Y+8	; 0x08
 ae6:	83 30       	cpi	r24, 0x03	; 3
 ae8:	91 05       	cpc	r25, r1
 aea:	09 f4       	brne	.+2      	; 0xaee <EXIT_enuSetSignalLatch+0x6c>
 aec:	3e c0       	rjmp	.+124    	; 0xb6a <EXIT_enuSetSignalLatch+0xe8>
 aee:	79 c0       	rjmp	.+242    	; 0xbe2 <EXIT_enuSetSignalLatch+0x160>

	case FALLING_EDGE:
	{
		error_state|= DIO_enuSetpinval(MCUCR_REG,local_u8Line,DIO_u8LOW);    DIO_enuSetpinval(MCUCR_REG,local_u8Line+1,DIO_u8HIGH);
 af0:	e5 e5       	ldi	r30, 0x55	; 85
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	80 81       	ld	r24, Z
 af6:	69 81       	ldd	r22, Y+1	; 0x01
 af8:	40 e0       	ldi	r20, 0x00	; 0
 afa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 afe:	98 2f       	mov	r25, r24
 b00:	8a 81       	ldd	r24, Y+2	; 0x02
 b02:	89 2b       	or	r24, r25
 b04:	8a 83       	std	Y+2, r24	; 0x02
 b06:	e5 e5       	ldi	r30, 0x55	; 85
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	20 81       	ld	r18, Z
 b0c:	89 81       	ldd	r24, Y+1	; 0x01
 b0e:	98 2f       	mov	r25, r24
 b10:	9f 5f       	subi	r25, 0xFF	; 255
 b12:	82 2f       	mov	r24, r18
 b14:	69 2f       	mov	r22, r25
 b16:	41 e0       	ldi	r20, 0x01	; 1
 b18:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 b1c:	62 c0       	rjmp	.+196    	; 0xbe2 <EXIT_enuSetSignalLatch+0x160>
		 break;
	}
	case RISING_EDGE:

	{
		error_state|=DIO_enuSetpinval(MCUCR_REG,local_u8Line,DIO_u8HIGH);    DIO_enuSetpinval(MCUCR_REG,local_u8Line,DIO_u8HIGH);
 b1e:	e5 e5       	ldi	r30, 0x55	; 85
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	80 81       	ld	r24, Z
 b24:	69 81       	ldd	r22, Y+1	; 0x01
 b26:	41 e0       	ldi	r20, 0x01	; 1
 b28:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 b2c:	98 2f       	mov	r25, r24
 b2e:	8a 81       	ldd	r24, Y+2	; 0x02
 b30:	89 2b       	or	r24, r25
 b32:	8a 83       	std	Y+2, r24	; 0x02
 b34:	e5 e5       	ldi	r30, 0x55	; 85
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	69 81       	ldd	r22, Y+1	; 0x01
 b3c:	41 e0       	ldi	r20, 0x01	; 1
 b3e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 b42:	4f c0       	rjmp	.+158    	; 0xbe2 <EXIT_enuSetSignalLatch+0x160>
		break;
	}
	case LOW_LEVEL:
	{
		error_state|=DIO_enuSetpinval(MCUCR_REG,local_u8Line,DIO_u8LOW);    DIO_enuSetpinval(MCUCR_REG,local_u8Line,DIO_u8LOW);
 b44:	e5 e5       	ldi	r30, 0x55	; 85
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	80 81       	ld	r24, Z
 b4a:	69 81       	ldd	r22, Y+1	; 0x01
 b4c:	40 e0       	ldi	r20, 0x00	; 0
 b4e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 b52:	98 2f       	mov	r25, r24
 b54:	8a 81       	ldd	r24, Y+2	; 0x02
 b56:	89 2b       	or	r24, r25
 b58:	8a 83       	std	Y+2, r24	; 0x02
 b5a:	e5 e5       	ldi	r30, 0x55	; 85
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	80 81       	ld	r24, Z
 b60:	69 81       	ldd	r22, Y+1	; 0x01
 b62:	40 e0       	ldi	r20, 0x00	; 0
 b64:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 b68:	3c c0       	rjmp	.+120    	; 0xbe2 <EXIT_enuSetSignalLatch+0x160>
				break;
	}
	case ON_CHANGE:
	{
		error_state|=DIO_enuSetpinval(MCUCR_REG,local_u8Line,DIO_u8HIGH);    DIO_enuSetpinval(MCUCR_REG,local_u8Line,DIO_u8LOW);
 b6a:	e5 e5       	ldi	r30, 0x55	; 85
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	69 81       	ldd	r22, Y+1	; 0x01
 b72:	41 e0       	ldi	r20, 0x01	; 1
 b74:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 b78:	98 2f       	mov	r25, r24
 b7a:	8a 81       	ldd	r24, Y+2	; 0x02
 b7c:	89 2b       	or	r24, r25
 b7e:	8a 83       	std	Y+2, r24	; 0x02
 b80:	e5 e5       	ldi	r30, 0x55	; 85
 b82:	f0 e0       	ldi	r31, 0x00	; 0
 b84:	80 81       	ld	r24, Z
 b86:	69 81       	ldd	r22, Y+1	; 0x01
 b88:	40 e0       	ldi	r20, 0x00	; 0
 b8a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 b8e:	29 c0       	rjmp	.+82     	; 0xbe2 <EXIT_enuSetSignalLatch+0x160>
				break;
	}

	}
}
	else if(copy_u8Line==LINE2){
 b90:	8b 81       	ldd	r24, Y+3	; 0x03
 b92:	85 30       	cpi	r24, 0x05	; 5
 b94:	31 f5       	brne	.+76     	; 0xbe2 <EXIT_enuSetSignalLatch+0x160>
		switch( copy_u8senseMode ){
 b96:	8c 81       	ldd	r24, Y+4	; 0x04
 b98:	28 2f       	mov	r18, r24
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	3e 83       	std	Y+6, r19	; 0x06
 b9e:	2d 83       	std	Y+5, r18	; 0x05
 ba0:	8d 81       	ldd	r24, Y+5	; 0x05
 ba2:	9e 81       	ldd	r25, Y+6	; 0x06
 ba4:	00 97       	sbiw	r24, 0x00	; 0
 ba6:	31 f0       	breq	.+12     	; 0xbb4 <EXIT_enuSetSignalLatch+0x132>
 ba8:	2d 81       	ldd	r18, Y+5	; 0x05
 baa:	3e 81       	ldd	r19, Y+6	; 0x06
 bac:	21 30       	cpi	r18, 0x01	; 1
 bae:	31 05       	cpc	r19, r1
 bb0:	69 f0       	breq	.+26     	; 0xbcc <EXIT_enuSetSignalLatch+0x14a>
 bb2:	17 c0       	rjmp	.+46     	; 0xbe2 <EXIT_enuSetSignalLatch+0x160>

				/* INT Sence Control (Trigger) For EXTI0 & EXTI1   */
				case FALLING_EDGE : error_state|=DIO_enuSetpinval( MCUCSR_REG , 6,0 );  break;
 bb4:	e4 e5       	ldi	r30, 0x54	; 84
 bb6:	f0 e0       	ldi	r31, 0x00	; 0
 bb8:	80 81       	ld	r24, Z
 bba:	66 e0       	ldi	r22, 0x06	; 6
 bbc:	40 e0       	ldi	r20, 0x00	; 0
 bbe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 bc2:	98 2f       	mov	r25, r24
 bc4:	8a 81       	ldd	r24, Y+2	; 0x02
 bc6:	89 2b       	or	r24, r25
 bc8:	8a 83       	std	Y+2, r24	; 0x02
 bca:	0b c0       	rjmp	.+22     	; 0xbe2 <EXIT_enuSetSignalLatch+0x160>
				case RISING_EDGE  :error_state|= DIO_enuSetpinval( MCUCSR_REG , 6,1 );  break;
 bcc:	e4 e5       	ldi	r30, 0x54	; 84
 bce:	f0 e0       	ldi	r31, 0x00	; 0
 bd0:	80 81       	ld	r24, Z
 bd2:	66 e0       	ldi	r22, 0x06	; 6
 bd4:	41 e0       	ldi	r20, 0x01	; 1
 bd6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_enuSetpinval>
 bda:	98 2f       	mov	r25, r24
 bdc:	8a 81       	ldd	r24, Y+2	; 0x02
 bde:	89 2b       	or	r24, r25
 be0:	8a 83       	std	Y+2, r24	; 0x02

				}
	}

		return error_state;
 be2:	8a 81       	ldd	r24, Y+2	; 0x02
}
 be4:	28 96       	adiw	r28, 0x08	; 8
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	cf 91       	pop	r28
 bf2:	df 91       	pop	r29
 bf4:	08 95       	ret

00000bf6 <EXIT_enuGetFlag>:

ES_ERROR EXIT_enuGetFlag(u8 copy_u8Line,u8 *copy_pFval){
 bf6:	df 93       	push	r29
 bf8:	cf 93       	push	r28
 bfa:	00 d0       	rcall	.+0      	; 0xbfc <EXIT_enuGetFlag+0x6>
 bfc:	00 d0       	rcall	.+0      	; 0xbfe <EXIT_enuGetFlag+0x8>
 bfe:	cd b7       	in	r28, 0x3d	; 61
 c00:	de b7       	in	r29, 0x3e	; 62
 c02:	8a 83       	std	Y+2, r24	; 0x02
 c04:	7c 83       	std	Y+4, r23	; 0x04
 c06:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR error_state=ES_OK;
 c08:	19 82       	std	Y+1, r1	; 0x01

	if ( (copy_u8Line>LINE2) && (copy_u8Line<LINE1) ){
 c0a:	8a 81       	ldd	r24, Y+2	; 0x02
 c0c:	86 30       	cpi	r24, 0x06	; 6
 c0e:	68 f0       	brcs	.+26     	; 0xc2a <EXIT_enuGetFlag+0x34>
 c10:	8a 81       	ldd	r24, Y+2	; 0x02
 c12:	87 30       	cpi	r24, 0x07	; 7
 c14:	50 f4       	brcc	.+20     	; 0xc2a <EXIT_enuGetFlag+0x34>
		DIO_enugetpinval(GIFR_REG ,copy_u8Line,copy_pFval);
 c16:	ea e5       	ldi	r30, 0x5A	; 90
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	80 81       	ld	r24, Z
 c1c:	2b 81       	ldd	r18, Y+3	; 0x03
 c1e:	3c 81       	ldd	r19, Y+4	; 0x04
 c20:	6a 81       	ldd	r22, Y+2	; 0x02
 c22:	a9 01       	movw	r20, r18
 c24:	0e 94 20 04 	call	0x840	; 0x840 <DIO_enugetpinval>
		error_state=ES_OK;
 c28:	19 82       	std	Y+1, r1	; 0x01
			}
			return error_state;
 c2a:	89 81       	ldd	r24, Y+1	; 0x01
}
 c2c:	0f 90       	pop	r0
 c2e:	0f 90       	pop	r0
 c30:	0f 90       	pop	r0
 c32:	0f 90       	pop	r0
 c34:	cf 91       	pop	r28
 c36:	df 91       	pop	r29
 c38:	08 95       	ret

00000c3a <__vector_1>:



void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 c3a:	1f 92       	push	r1
 c3c:	0f 92       	push	r0
 c3e:	0f b6       	in	r0, 0x3f	; 63
 c40:	0f 92       	push	r0
 c42:	11 24       	eor	r1, r1
 c44:	2f 93       	push	r18
 c46:	3f 93       	push	r19
 c48:	4f 93       	push	r20
 c4a:	5f 93       	push	r21
 c4c:	6f 93       	push	r22
 c4e:	7f 93       	push	r23
 c50:	8f 93       	push	r24
 c52:	9f 93       	push	r25
 c54:	af 93       	push	r26
 c56:	bf 93       	push	r27
 c58:	ef 93       	push	r30
 c5a:	ff 93       	push	r31
 c5c:	df 93       	push	r29
 c5e:	cf 93       	push	r28
 c60:	cd b7       	in	r28, 0x3d	; 61
 c62:	de b7       	in	r29, 0x3e	; 62
if( callBakPointer[0]!= NULL ){
 c64:	80 91 60 00 	lds	r24, 0x0060
 c68:	90 91 61 00 	lds	r25, 0x0061
 c6c:	00 97       	sbiw	r24, 0x00	; 0
 c6e:	41 f0       	breq	.+16     	; 0xc80 <__vector_1+0x46>
	callBakPointer[0]();
 c70:	e0 91 60 00 	lds	r30, 0x0060
 c74:	f0 91 61 00 	lds	r31, 0x0061
 c78:	09 95       	icall

	EXIT_enuClearFlag(LINE0);}
 c7a:	86 e0       	ldi	r24, 0x06	; 6
 c7c:	0e 94 00 05 	call	0xa00	; 0xa00 <EXIT_enuClearFlag>

}
 c80:	cf 91       	pop	r28
 c82:	df 91       	pop	r29
 c84:	ff 91       	pop	r31
 c86:	ef 91       	pop	r30
 c88:	bf 91       	pop	r27
 c8a:	af 91       	pop	r26
 c8c:	9f 91       	pop	r25
 c8e:	8f 91       	pop	r24
 c90:	7f 91       	pop	r23
 c92:	6f 91       	pop	r22
 c94:	5f 91       	pop	r21
 c96:	4f 91       	pop	r20
 c98:	3f 91       	pop	r19
 c9a:	2f 91       	pop	r18
 c9c:	0f 90       	pop	r0
 c9e:	0f be       	out	0x3f, r0	; 63
 ca0:	0f 90       	pop	r0
 ca2:	1f 90       	pop	r1
 ca4:	18 95       	reti

00000ca6 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 ca6:	1f 92       	push	r1
 ca8:	0f 92       	push	r0
 caa:	0f b6       	in	r0, 0x3f	; 63
 cac:	0f 92       	push	r0
 cae:	11 24       	eor	r1, r1
 cb0:	2f 93       	push	r18
 cb2:	3f 93       	push	r19
 cb4:	4f 93       	push	r20
 cb6:	5f 93       	push	r21
 cb8:	6f 93       	push	r22
 cba:	7f 93       	push	r23
 cbc:	8f 93       	push	r24
 cbe:	9f 93       	push	r25
 cc0:	af 93       	push	r26
 cc2:	bf 93       	push	r27
 cc4:	ef 93       	push	r30
 cc6:	ff 93       	push	r31
 cc8:	df 93       	push	r29
 cca:	cf 93       	push	r28
 ccc:	cd b7       	in	r28, 0x3d	; 61
 cce:	de b7       	in	r29, 0x3e	; 62
if( callBakPointer[1]!= NULL ){
 cd0:	80 91 62 00 	lds	r24, 0x0062
 cd4:	90 91 63 00 	lds	r25, 0x0063
 cd8:	00 97       	sbiw	r24, 0x00	; 0
 cda:	41 f0       	breq	.+16     	; 0xcec <__vector_2+0x46>
	callBakPointer[1]();
 cdc:	e0 91 62 00 	lds	r30, 0x0062
 ce0:	f0 91 63 00 	lds	r31, 0x0063
 ce4:	09 95       	icall

	EXIT_enuClearFlag(LINE1);}}
 ce6:	87 e0       	ldi	r24, 0x07	; 7
 ce8:	0e 94 00 05 	call	0xa00	; 0xa00 <EXIT_enuClearFlag>
 cec:	cf 91       	pop	r28
 cee:	df 91       	pop	r29
 cf0:	ff 91       	pop	r31
 cf2:	ef 91       	pop	r30
 cf4:	bf 91       	pop	r27
 cf6:	af 91       	pop	r26
 cf8:	9f 91       	pop	r25
 cfa:	8f 91       	pop	r24
 cfc:	7f 91       	pop	r23
 cfe:	6f 91       	pop	r22
 d00:	5f 91       	pop	r21
 d02:	4f 91       	pop	r20
 d04:	3f 91       	pop	r19
 d06:	2f 91       	pop	r18
 d08:	0f 90       	pop	r0
 d0a:	0f be       	out	0x3f, r0	; 63
 d0c:	0f 90       	pop	r0
 d0e:	1f 90       	pop	r1
 d10:	18 95       	reti

00000d12 <__vector_3>:



void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 d12:	1f 92       	push	r1
 d14:	0f 92       	push	r0
 d16:	0f b6       	in	r0, 0x3f	; 63
 d18:	0f 92       	push	r0
 d1a:	11 24       	eor	r1, r1
 d1c:	2f 93       	push	r18
 d1e:	3f 93       	push	r19
 d20:	4f 93       	push	r20
 d22:	5f 93       	push	r21
 d24:	6f 93       	push	r22
 d26:	7f 93       	push	r23
 d28:	8f 93       	push	r24
 d2a:	9f 93       	push	r25
 d2c:	af 93       	push	r26
 d2e:	bf 93       	push	r27
 d30:	ef 93       	push	r30
 d32:	ff 93       	push	r31
 d34:	df 93       	push	r29
 d36:	cf 93       	push	r28
 d38:	cd b7       	in	r28, 0x3d	; 61
 d3a:	de b7       	in	r29, 0x3e	; 62
if( callBakPointer[2]!= NULL ){
 d3c:	80 91 64 00 	lds	r24, 0x0064
 d40:	90 91 65 00 	lds	r25, 0x0065
 d44:	00 97       	sbiw	r24, 0x00	; 0
 d46:	41 f0       	breq	.+16     	; 0xd58 <__vector_3+0x46>
	callBakPointer[2]();
 d48:	e0 91 64 00 	lds	r30, 0x0064
 d4c:	f0 91 65 00 	lds	r31, 0x0065
 d50:	09 95       	icall

	EXIT_enuClearFlag(LINE2);}
 d52:	85 e0       	ldi	r24, 0x05	; 5
 d54:	0e 94 00 05 	call	0xa00	; 0xa00 <EXIT_enuClearFlag>

}
 d58:	cf 91       	pop	r28
 d5a:	df 91       	pop	r29
 d5c:	ff 91       	pop	r31
 d5e:	ef 91       	pop	r30
 d60:	bf 91       	pop	r27
 d62:	af 91       	pop	r26
 d64:	9f 91       	pop	r25
 d66:	8f 91       	pop	r24
 d68:	7f 91       	pop	r23
 d6a:	6f 91       	pop	r22
 d6c:	5f 91       	pop	r21
 d6e:	4f 91       	pop	r20
 d70:	3f 91       	pop	r19
 d72:	2f 91       	pop	r18
 d74:	0f 90       	pop	r0
 d76:	0f be       	out	0x3f, r0	; 63
 d78:	0f 90       	pop	r0
 d7a:	1f 90       	pop	r1
 d7c:	18 95       	reti

00000d7e <main>:
 *      Author: User
 */
#include "stdTypes.h"
#include"errorState.h"

int main(void){
 d7e:	df 93       	push	r29
 d80:	cf 93       	push	r28
 d82:	cd b7       	in	r28, 0x3d	; 61
 d84:	de b7       	in	r29, 0x3e	; 62
	//LCD_enuDisplayString("MANAR");
	LCD_enuDisplayNumPOS(56,2,5);
	while(1);*/


	return 1;
 d86:	81 e0       	ldi	r24, 0x01	; 1
 d88:	90 e0       	ldi	r25, 0x00	; 0
}
 d8a:	cf 91       	pop	r28
 d8c:	df 91       	pop	r29
 d8e:	08 95       	ret

00000d90 <_exit>:
 d90:	f8 94       	cli

00000d92 <__stop_program>:
 d92:	ff cf       	rjmp	.-2      	; 0xd92 <__stop_program>
