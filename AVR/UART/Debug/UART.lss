
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00002862  000028f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800086  00800086  0000291c  2**0
                  ALLOC
  3 .stab         00002124  00000000  00000000  0000291c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5d  00000000  00000000  00004a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000579d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000058dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007696  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008581  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009330  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000971d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 12 	call	0x25ec	; 0x25ec <main>
      8a:	0c 94 2f 14 	jmp	0x285e	; 0x285e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SET_PIN_DIR>:
#include  "errorState.h"
#include "priv.h"
#include "config.h"
#include "interface.h"
#include "REG.h"
u8 DIO_SET_PIN_DIR(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8val){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_SET_PIN_DIR+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_SET_PIN_DIR+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <DIO_SET_PIN_DIR+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
     b58:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOCAL_ERROR =DIO_NOK;
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8pin<=7){
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	88 30       	cpi	r24, 0x08	; 8
     b62:	08 f0       	brcs	.+2      	; 0xb66 <DIO_SET_PIN_DIR+0x20>
     b64:	cc c0       	rjmp	.+408    	; 0xcfe <DIO_SET_PIN_DIR+0x1b8>
		if(copy_u8port<=3){
     b66:	8a 81       	ldd	r24, Y+2	; 0x02
     b68:	84 30       	cpi	r24, 0x04	; 4
     b6a:	08 f0       	brcs	.+2      	; 0xb6e <DIO_SET_PIN_DIR+0x28>
     b6c:	c8 c0       	rjmp	.+400    	; 0xcfe <DIO_SET_PIN_DIR+0x1b8>
			switch(copy_u8port){
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	3e 83       	std	Y+6, r19	; 0x06
     b76:	2d 83       	std	Y+5, r18	; 0x05
     b78:	6d 81       	ldd	r22, Y+5	; 0x05
     b7a:	7e 81       	ldd	r23, Y+6	; 0x06
     b7c:	61 30       	cpi	r22, 0x01	; 1
     b7e:	71 05       	cpc	r23, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <DIO_SET_PIN_DIR+0x3e>
     b82:	41 c0       	rjmp	.+130    	; 0xc06 <DIO_SET_PIN_DIR+0xc0>
     b84:	8d 81       	ldd	r24, Y+5	; 0x05
     b86:	9e 81       	ldd	r25, Y+6	; 0x06
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	91 05       	cpc	r25, r1
     b8c:	34 f4       	brge	.+12     	; 0xb9a <DIO_SET_PIN_DIR+0x54>
     b8e:	2d 81       	ldd	r18, Y+5	; 0x05
     b90:	3e 81       	ldd	r19, Y+6	; 0x06
     b92:	21 15       	cp	r18, r1
     b94:	31 05       	cpc	r19, r1
     b96:	71 f0       	breq	.+28     	; 0xbb4 <DIO_SET_PIN_DIR+0x6e>
     b98:	b0 c0       	rjmp	.+352    	; 0xcfa <DIO_SET_PIN_DIR+0x1b4>
     b9a:	6d 81       	ldd	r22, Y+5	; 0x05
     b9c:	7e 81       	ldd	r23, Y+6	; 0x06
     b9e:	62 30       	cpi	r22, 0x02	; 2
     ba0:	71 05       	cpc	r23, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <DIO_SET_PIN_DIR+0x60>
     ba4:	59 c0       	rjmp	.+178    	; 0xc58 <DIO_SET_PIN_DIR+0x112>
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	9e 81       	ldd	r25, Y+6	; 0x06
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	91 05       	cpc	r25, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <DIO_SET_PIN_DIR+0x6c>
     bb0:	7c c0       	rjmp	.+248    	; 0xcaa <DIO_SET_PIN_DIR+0x164>
     bb2:	a3 c0       	rjmp	.+326    	; 0xcfa <DIO_SET_PIN_DIR+0x1b4>
			case DIO_PORTA:
				RESET_BIT(DDRA,copy_u8pin);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_SET_PIN_DIR+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	2a 95       	dec	r18
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_SET_PIN_DIR+0x86>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
				SET_BIT(DDRA,copy_u8pin,copy_u8val);
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	b9 01       	movw	r22, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_SET_PIN_DIR+0xb4>
     bf6:	66 0f       	add	r22, r22
     bf8:	77 1f       	adc	r23, r23
     bfa:	8a 95       	dec	r24
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_SET_PIN_DIR+0xb0>
     bfe:	cb 01       	movw	r24, r22
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	7a c0       	rjmp	.+244    	; 0xcfa <DIO_SET_PIN_DIR+0x1b4>
				break;

			case DIO_PORTB:
				RESET_BIT(DDRB,copy_u8pin);
     c06:	a7 e3       	ldi	r26, 0x37	; 55
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e7 e3       	ldi	r30, 0x37	; 55
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_SET_PIN_DIR+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	2a 95       	dec	r18
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_SET_PIN_DIR+0xd8>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
				SET_BIT(DDRB,copy_u8pin,copy_u8val);
     c2c:	a7 e3       	ldi	r26, 0x37	; 55
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e7 e3       	ldi	r30, 0x37	; 55
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	48 2f       	mov	r20, r24
     c38:	8c 81       	ldd	r24, Y+4	; 0x04
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	b9 01       	movw	r22, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_SET_PIN_DIR+0x106>
     c48:	66 0f       	add	r22, r22
     c4a:	77 1f       	adc	r23, r23
     c4c:	8a 95       	dec	r24
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_SET_PIN_DIR+0x102>
     c50:	cb 01       	movw	r24, r22
     c52:	84 2b       	or	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	51 c0       	rjmp	.+162    	; 0xcfa <DIO_SET_PIN_DIR+0x1b4>
							break;
			case DIO_PORTC:
				RESET_BIT(DDRC,copy_u8pin);
     c58:	a4 e3       	ldi	r26, 0x34	; 52
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e4 e3       	ldi	r30, 0x34	; 52
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_SET_PIN_DIR+0x12e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	2a 95       	dec	r18
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_SET_PIN_DIR+0x12a>
     c78:	80 95       	com	r24
     c7a:	84 23       	and	r24, r20
     c7c:	8c 93       	st	X, r24
				SET_BIT(DDRC,copy_u8pin,copy_u8val);
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	b9 01       	movw	r22, r18
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <DIO_SET_PIN_DIR+0x158>
     c9a:	66 0f       	add	r22, r22
     c9c:	77 1f       	adc	r23, r23
     c9e:	8a 95       	dec	r24
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <DIO_SET_PIN_DIR+0x154>
     ca2:	cb 01       	movw	r24, r22
     ca4:	84 2b       	or	r24, r20
     ca6:	8c 93       	st	X, r24
     ca8:	28 c0       	rjmp	.+80     	; 0xcfa <DIO_SET_PIN_DIR+0x1b4>
							break;

			case DIO_PORTD:
				RESET_BIT(DDRD,copy_u8pin);
     caa:	a1 e3       	ldi	r26, 0x31	; 49
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e1 e3       	ldi	r30, 0x31	; 49
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	48 2f       	mov	r20, r24
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <DIO_SET_PIN_DIR+0x180>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	2a 95       	dec	r18
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <DIO_SET_PIN_DIR+0x17c>
     cca:	80 95       	com	r24
     ccc:	84 23       	and	r24, r20
     cce:	8c 93       	st	X, r24
				SET_BIT(DDRD,copy_u8pin,copy_u8val);
     cd0:	a1 e3       	ldi	r26, 0x31	; 49
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e1 e3       	ldi	r30, 0x31	; 49
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	48 2f       	mov	r20, r24
     cdc:	8c 81       	ldd	r24, Y+4	; 0x04
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	b9 01       	movw	r22, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_SET_PIN_DIR+0x1aa>
     cec:	66 0f       	add	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	8a 95       	dec	r24
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_SET_PIN_DIR+0x1a6>
     cf4:	cb 01       	movw	r24, r22
     cf6:	84 2b       	or	r24, r20
     cf8:	8c 93       	st	X, r24
							break;
			}
			LOCAL_ERROR =OK;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	89 83       	std	Y+1, r24	; 0x01
		}

	}
  return LOCAL_ERROR;
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
}
     d00:	26 96       	adiw	r28, 0x06	; 6
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <DIO_SET_PIN_VAL>:


u8 DIO_SET_PIN_VAL(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8val){
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <DIO_SET_PIN_VAL+0x6>
     d18:	00 d0       	rcall	.+0      	; 0xd1a <DIO_SET_PIN_VAL+0x8>
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <DIO_SET_PIN_VAL+0xa>
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	8a 83       	std	Y+2, r24	; 0x02
     d22:	6b 83       	std	Y+3, r22	; 0x03
     d24:	4c 83       	std	Y+4, r20	; 0x04

	u8 LOCAL_ERROR=DIO_NOK;
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8port<=3)&&(copy_u8pin<=7)&&(copy_u8val<=1)){
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	84 30       	cpi	r24, 0x04	; 4
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <DIO_SET_PIN_VAL+0x20>
     d30:	d0 c0       	rjmp	.+416    	; 0xed2 <DIO_SET_PIN_VAL+0x1c0>
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	88 30       	cpi	r24, 0x08	; 8
     d36:	08 f0       	brcs	.+2      	; 0xd3a <DIO_SET_PIN_VAL+0x28>
     d38:	cc c0       	rjmp	.+408    	; 0xed2 <DIO_SET_PIN_VAL+0x1c0>
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <DIO_SET_PIN_VAL+0x30>
     d40:	c8 c0       	rjmp	.+400    	; 0xed2 <DIO_SET_PIN_VAL+0x1c0>
		switch(copy_u8port){
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	3e 83       	std	Y+6, r19	; 0x06
     d4a:	2d 83       	std	Y+5, r18	; 0x05
     d4c:	6d 81       	ldd	r22, Y+5	; 0x05
     d4e:	7e 81       	ldd	r23, Y+6	; 0x06
     d50:	61 30       	cpi	r22, 0x01	; 1
     d52:	71 05       	cpc	r23, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_SET_PIN_VAL+0x46>
     d56:	41 c0       	rjmp	.+130    	; 0xdda <DIO_SET_PIN_VAL+0xc8>
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	82 30       	cpi	r24, 0x02	; 2
     d5e:	91 05       	cpc	r25, r1
     d60:	34 f4       	brge	.+12     	; 0xd6e <DIO_SET_PIN_VAL+0x5c>
     d62:	2d 81       	ldd	r18, Y+5	; 0x05
     d64:	3e 81       	ldd	r19, Y+6	; 0x06
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	71 f0       	breq	.+28     	; 0xd88 <DIO_SET_PIN_VAL+0x76>
     d6c:	b0 c0       	rjmp	.+352    	; 0xece <DIO_SET_PIN_VAL+0x1bc>
     d6e:	6d 81       	ldd	r22, Y+5	; 0x05
     d70:	7e 81       	ldd	r23, Y+6	; 0x06
     d72:	62 30       	cpi	r22, 0x02	; 2
     d74:	71 05       	cpc	r23, r1
     d76:	09 f4       	brne	.+2      	; 0xd7a <DIO_SET_PIN_VAL+0x68>
     d78:	59 c0       	rjmp	.+178    	; 0xe2c <DIO_SET_PIN_VAL+0x11a>
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	91 05       	cpc	r25, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <DIO_SET_PIN_VAL+0x74>
     d84:	7c c0       	rjmp	.+248    	; 0xe7e <DIO_SET_PIN_VAL+0x16c>
     d86:	a3 c0       	rjmp	.+326    	; 0xece <DIO_SET_PIN_VAL+0x1bc>
		case DIO_PORTA:
			RESET_BIT(PORTA,copy_u8pin);
     d88:	ab e3       	ldi	r26, 0x3B	; 59
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	eb e3       	ldi	r30, 0x3B	; 59
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_SET_PIN_VAL+0x92>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	2a 95       	dec	r18
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_SET_PIN_VAL+0x8e>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
			SET_BIT(PORTA,copy_u8pin,copy_u8val);
     dae:	ab e3       	ldi	r26, 0x3B	; 59
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	eb e3       	ldi	r30, 0x3B	; 59
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8c 81       	ldd	r24, Y+4	; 0x04
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	b9 01       	movw	r22, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_SET_PIN_VAL+0xbc>
     dca:	66 0f       	add	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	8a 95       	dec	r24
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_SET_PIN_VAL+0xb8>
     dd2:	cb 01       	movw	r24, r22
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	7a c0       	rjmp	.+244    	; 0xece <DIO_SET_PIN_VAL+0x1bc>
			break;
		case DIO_PORTB:
					RESET_BIT(PORTB,copy_u8pin);
     dda:	a8 e3       	ldi	r26, 0x38	; 56
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e8 e3       	ldi	r30, 0x38	; 56
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_SET_PIN_VAL+0xe4>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	2a 95       	dec	r18
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_SET_PIN_VAL+0xe0>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
					SET_BIT(PORTB,copy_u8pin,copy_u8val);
     e00:	a8 e3       	ldi	r26, 0x38	; 56
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e3       	ldi	r30, 0x38	; 56
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	88 2f       	mov	r24, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	b9 01       	movw	r22, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_SET_PIN_VAL+0x10e>
     e1c:	66 0f       	add	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	8a 95       	dec	r24
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_SET_PIN_VAL+0x10a>
     e24:	cb 01       	movw	r24, r22
     e26:	84 2b       	or	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	51 c0       	rjmp	.+162    	; 0xece <DIO_SET_PIN_VAL+0x1bc>
			break;
		case DIO_PORTC:
					RESET_BIT(PORTC,copy_u8pin);
     e2c:	a5 e3       	ldi	r26, 0x35	; 53
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e5 e3       	ldi	r30, 0x35	; 53
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_SET_PIN_VAL+0x136>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	2a 95       	dec	r18
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_SET_PIN_VAL+0x132>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
					SET_BIT(PORTC,copy_u8pin,copy_u8val);
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	b9 01       	movw	r22, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_SET_PIN_VAL+0x160>
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	8a 95       	dec	r24
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_SET_PIN_VAL+0x15c>
     e76:	cb 01       	movw	r24, r22
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	28 c0       	rjmp	.+80     	; 0xece <DIO_SET_PIN_VAL+0x1bc>
					break;
		case DIO_PORTD:
					RESET_BIT(PORTD,copy_u8pin);
     e7e:	a2 e3       	ldi	r26, 0x32	; 50
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e2 e3       	ldi	r30, 0x32	; 50
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_SET_PIN_VAL+0x188>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	2a 95       	dec	r18
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_SET_PIN_VAL+0x184>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
					SET_BIT(PORTD,copy_u8pin,copy_u8val);
     ea4:	a2 e3       	ldi	r26, 0x32	; 50
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e2 e3       	ldi	r30, 0x32	; 50
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	b9 01       	movw	r22, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_SET_PIN_VAL+0x1b2>
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	8a 95       	dec	r24
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_SET_PIN_VAL+0x1ae>
     ec8:	cb 01       	movw	r24, r22
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
					break;

		}
		LOCAL_ERROR=OK;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	89 83       	std	Y+1, r24	; 0x01
	}
return LOCAL_ERROR;
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed4:	26 96       	adiw	r28, 0x06	; 6
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <DIO_SET_PORT_VAL>:


u8 DIO_SET_PORT_VAL(u8 copy_u8port,u8 copy_u8val){
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <DIO_SET_PORT_VAL+0x6>
     eec:	00 d0       	rcall	.+0      	; 0xeee <DIO_SET_PORT_VAL+0x8>
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	8a 83       	std	Y+2, r24	; 0x02
     ef6:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOKAL_ERROR=DIO_NOK;
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8port<=3){
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	a0 f5       	brcc	.+104    	; 0xf6a <DIO_SET_PORT_VAL+0x84>
		switch(copy_u8port){
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	3d 83       	std	Y+5, r19	; 0x05
     f0a:	2c 83       	std	Y+4, r18	; 0x04
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	9d 81       	ldd	r25, Y+5	; 0x05
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	91 05       	cpc	r25, r1
     f14:	d1 f0       	breq	.+52     	; 0xf4a <DIO_SET_PORT_VAL+0x64>
     f16:	2c 81       	ldd	r18, Y+4	; 0x04
     f18:	3d 81       	ldd	r19, Y+5	; 0x05
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <DIO_SET_PORT_VAL+0x44>
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	9d 81       	ldd	r25, Y+5	; 0x05
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	61 f0       	breq	.+24     	; 0xf40 <DIO_SET_PORT_VAL+0x5a>
     f28:	1e c0       	rjmp	.+60     	; 0xf66 <DIO_SET_PORT_VAL+0x80>
     f2a:	2c 81       	ldd	r18, Y+4	; 0x04
     f2c:	3d 81       	ldd	r19, Y+5	; 0x05
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	81 f0       	breq	.+32     	; 0xf54 <DIO_SET_PORT_VAL+0x6e>
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	81 f0       	breq	.+32     	; 0xf5e <DIO_SET_PORT_VAL+0x78>
     f3e:	13 c0       	rjmp	.+38     	; 0xf66 <DIO_SET_PORT_VAL+0x80>
		case DIO_PORTA:
					PORTA=copy_u8val;
     f40:	eb e3       	ldi	r30, 0x3B	; 59
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	80 83       	st	Z, r24
     f48:	0e c0       	rjmp	.+28     	; 0xf66 <DIO_SET_PORT_VAL+0x80>
					break;
				case DIO_PORTB:
							PORTB=copy_u8val;
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 83       	st	Z, r24
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <DIO_SET_PORT_VAL+0x80>
					break;
				case DIO_PORTC:
									PORTC=copy_u8val;
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	80 83       	st	Z, r24
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <DIO_SET_PORT_VAL+0x80>
							break;
				case DIO_PORTD:
									PORTD=copy_u8val;
     f5e:	e2 e3       	ldi	r30, 0x32	; 50
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	80 83       	st	Z, r24
							break;
		}
		LOKAL_ERROR=OK;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOKAL_ERROR;
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <DIO_SET_PORT_DIR>:
u8 DIO_SET_PORT_DIR(u8 copy_u8port,u8 copy_u8val){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <DIO_SET_PORT_DIR+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <DIO_SET_PORT_DIR+0x8>
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	8a 83       	std	Y+2, r24	; 0x02
     f8c:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOKAL_ERROR=DIO_NOK;
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8port<=3){
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	84 30       	cpi	r24, 0x04	; 4
     f96:	a0 f5       	brcc	.+104    	; 0x1000 <DIO_SET_PORT_DIR+0x84>
		switch(copy_u8port){
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	3d 83       	std	Y+5, r19	; 0x05
     fa0:	2c 83       	std	Y+4, r18	; 0x04
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	91 05       	cpc	r25, r1
     faa:	d1 f0       	breq	.+52     	; 0xfe0 <DIO_SET_PORT_DIR+0x64>
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	31 05       	cpc	r19, r1
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <DIO_SET_PORT_DIR+0x44>
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	61 f0       	breq	.+24     	; 0xfd6 <DIO_SET_PORT_DIR+0x5a>
     fbe:	1e c0       	rjmp	.+60     	; 0xffc <DIO_SET_PORT_DIR+0x80>
     fc0:	2c 81       	ldd	r18, Y+4	; 0x04
     fc2:	3d 81       	ldd	r19, Y+5	; 0x05
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	81 f0       	breq	.+32     	; 0xfea <DIO_SET_PORT_DIR+0x6e>
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	91 05       	cpc	r25, r1
     fd2:	81 f0       	breq	.+32     	; 0xff4 <DIO_SET_PORT_DIR+0x78>
     fd4:	13 c0       	rjmp	.+38     	; 0xffc <DIO_SET_PORT_DIR+0x80>
		case DIO_PORTA:
					DDRA=copy_u8val;
     fd6:	ea e3       	ldi	r30, 0x3A	; 58
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	80 83       	st	Z, r24
     fde:	0e c0       	rjmp	.+28     	; 0xffc <DIO_SET_PORT_DIR+0x80>
					break;
				case DIO_PORTB:
							DDRB=copy_u8val;
     fe0:	e7 e3       	ldi	r30, 0x37	; 55
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	80 83       	st	Z, r24
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <DIO_SET_PORT_DIR+0x80>
					break;
				case DIO_PORTC:
									DDRC=copy_u8val;
     fea:	e4 e3       	ldi	r30, 0x34	; 52
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	80 83       	st	Z, r24
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <DIO_SET_PORT_DIR+0x80>
							break;
				case DIO_PORTD:
									DDRD=copy_u8val;
     ff4:	e1 e3       	ldi	r30, 0x31	; 49
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	80 83       	st	Z, r24
							break;
		}
		LOKAL_ERROR=OK;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOKAL_ERROR;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_GET_PIN_VAL>:

u8 DIO_GET_PIN_VAL(u8 copy_u8port,u8 copy_u8pin,u8 *copy_u8val){
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	27 97       	sbiw	r28, 0x07	; 7
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	8a 83       	std	Y+2, r24	; 0x02
    1028:	6b 83       	std	Y+3, r22	; 0x03
    102a:	5d 83       	std	Y+5, r21	; 0x05
    102c:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOCAL_ERROR=DIO_NOK;
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8port<=3)&&(copy_u8pin<=7)){
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	84 30       	cpi	r24, 0x04	; 4
    1036:	08 f0       	brcs	.+2      	; 0x103a <DIO_GET_PIN_VAL+0x28>
    1038:	76 c0       	rjmp	.+236    	; 0x1126 <DIO_GET_PIN_VAL+0x114>
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	88 30       	cpi	r24, 0x08	; 8
    103e:	08 f0       	brcs	.+2      	; 0x1042 <DIO_GET_PIN_VAL+0x30>
    1040:	72 c0       	rjmp	.+228    	; 0x1126 <DIO_GET_PIN_VAL+0x114>
		switch(copy_u8port){
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3f 83       	std	Y+7, r19	; 0x07
    104a:	2e 83       	std	Y+6, r18	; 0x06
    104c:	4e 81       	ldd	r20, Y+6	; 0x06
    104e:	5f 81       	ldd	r21, Y+7	; 0x07
    1050:	41 30       	cpi	r20, 0x01	; 1
    1052:	51 05       	cpc	r21, r1
    1054:	59 f1       	breq	.+86     	; 0x10ac <DIO_GET_PIN_VAL+0x9a>
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	9f 81       	ldd	r25, Y+7	; 0x07
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	91 05       	cpc	r25, r1
    105e:	34 f4       	brge	.+12     	; 0x106c <DIO_GET_PIN_VAL+0x5a>
    1060:	2e 81       	ldd	r18, Y+6	; 0x06
    1062:	3f 81       	ldd	r19, Y+7	; 0x07
    1064:	21 15       	cp	r18, r1
    1066:	31 05       	cpc	r19, r1
    1068:	69 f0       	breq	.+26     	; 0x1084 <DIO_GET_PIN_VAL+0x72>
    106a:	5b c0       	rjmp	.+182    	; 0x1122 <DIO_GET_PIN_VAL+0x110>
    106c:	4e 81       	ldd	r20, Y+6	; 0x06
    106e:	5f 81       	ldd	r21, Y+7	; 0x07
    1070:	42 30       	cpi	r20, 0x02	; 2
    1072:	51 05       	cpc	r21, r1
    1074:	79 f1       	breq	.+94     	; 0x10d4 <DIO_GET_PIN_VAL+0xc2>
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	9f 81       	ldd	r25, Y+7	; 0x07
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	91 05       	cpc	r25, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <DIO_GET_PIN_VAL+0x70>
    1080:	3d c0       	rjmp	.+122    	; 0x10fc <DIO_GET_PIN_VAL+0xea>
    1082:	4f c0       	rjmp	.+158    	; 0x1122 <DIO_GET_PIN_VAL+0x110>
		case DIO_PORTA:
			*copy_u8val=GET_BIT(PINA,copy_u8pin);
    1084:	e9 e3       	ldi	r30, 0x39	; 57
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a9 01       	movw	r20, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_GET_PIN_VAL+0x8a>
    1098:	55 95       	asr	r21
    109a:	47 95       	ror	r20
    109c:	8a 95       	dec	r24
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_GET_PIN_VAL+0x86>
    10a0:	ca 01       	movw	r24, r20
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	ec 81       	ldd	r30, Y+4	; 0x04
    10a6:	fd 81       	ldd	r31, Y+5	; 0x05
    10a8:	80 83       	st	Z, r24
    10aa:	3b c0       	rjmp	.+118    	; 0x1122 <DIO_GET_PIN_VAL+0x110>
			break;
		case DIO_PORTB:
					*copy_u8val=GET_BIT(PINB,copy_u8pin);
    10ac:	e6 e3       	ldi	r30, 0x36	; 54
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a9 01       	movw	r20, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_GET_PIN_VAL+0xb2>
    10c0:	55 95       	asr	r21
    10c2:	47 95       	ror	r20
    10c4:	8a 95       	dec	r24
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_GET_PIN_VAL+0xae>
    10c8:	ca 01       	movw	r24, r20
    10ca:	81 70       	andi	r24, 0x01	; 1
    10cc:	ec 81       	ldd	r30, Y+4	; 0x04
    10ce:	fd 81       	ldd	r31, Y+5	; 0x05
    10d0:	80 83       	st	Z, r24
    10d2:	27 c0       	rjmp	.+78     	; 0x1122 <DIO_GET_PIN_VAL+0x110>
					break;
		case DIO_PORTC:
					*copy_u8val=GET_BIT(PINC,copy_u8pin);
    10d4:	e3 e3       	ldi	r30, 0x33	; 51
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a9 01       	movw	r20, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_GET_PIN_VAL+0xda>
    10e8:	55 95       	asr	r21
    10ea:	47 95       	ror	r20
    10ec:	8a 95       	dec	r24
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_GET_PIN_VAL+0xd6>
    10f0:	ca 01       	movw	r24, r20
    10f2:	81 70       	andi	r24, 0x01	; 1
    10f4:	ec 81       	ldd	r30, Y+4	; 0x04
    10f6:	fd 81       	ldd	r31, Y+5	; 0x05
    10f8:	80 83       	st	Z, r24
    10fa:	13 c0       	rjmp	.+38     	; 0x1122 <DIO_GET_PIN_VAL+0x110>
					break;
		case DIO_PORTD:
					*copy_u8val=GET_BIT(PIND,copy_u8pin);
    10fc:	e0 e3       	ldi	r30, 0x30	; 48
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_GET_PIN_VAL+0x102>
    1110:	55 95       	asr	r21
    1112:	47 95       	ror	r20
    1114:	8a 95       	dec	r24
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_GET_PIN_VAL+0xfe>
    1118:	ca 01       	movw	r24, r20
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	ec 81       	ldd	r30, Y+4	; 0x04
    111e:	fd 81       	ldd	r31, Y+5	; 0x05
    1120:	80 83       	st	Z, r24
					break;

		}
		LOCAL_ERROR=OK;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOCAL_ERROR;
    1126:	89 81       	ldd	r24, Y+1	; 0x01
}
    1128:	27 96       	adiw	r28, 0x07	; 7
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <DIO_GET_PORT_VAL>:

u8 DIO_GET_PORT_VAL(u8 copy_u8port,u8* copy_u8val){
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_GET_PORT_VAL+0x6>
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_GET_PORT_VAL+0x8>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <DIO_GET_PORT_VAL+0xa>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	8a 83       	std	Y+2, r24	; 0x02
    114a:	7c 83       	std	Y+4, r23	; 0x04
    114c:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOCAL_ERROR=DIO_NOK;
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8port<=3)){
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	84 30       	cpi	r24, 0x04	; 4
    1156:	e0 f5       	brcc	.+120    	; 0x11d0 <DIO_GET_PORT_VAL+0x96>
		switch(copy_u8port){
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3e 83       	std	Y+6, r19	; 0x06
    1160:	2d 83       	std	Y+5, r18	; 0x05
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	91 05       	cpc	r25, r1
    116a:	e1 f0       	breq	.+56     	; 0x11a4 <DIO_GET_PORT_VAL+0x6a>
    116c:	2d 81       	ldd	r18, Y+5	; 0x05
    116e:	3e 81       	ldd	r19, Y+6	; 0x06
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	2c f4       	brge	.+10     	; 0x1180 <DIO_GET_PORT_VAL+0x46>
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	61 f0       	breq	.+24     	; 0x1196 <DIO_GET_PORT_VAL+0x5c>
    117e:	26 c0       	rjmp	.+76     	; 0x11cc <DIO_GET_PORT_VAL+0x92>
    1180:	2d 81       	ldd	r18, Y+5	; 0x05
    1182:	3e 81       	ldd	r19, Y+6	; 0x06
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	a1 f0       	breq	.+40     	; 0x11b2 <DIO_GET_PORT_VAL+0x78>
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	91 05       	cpc	r25, r1
    1192:	b1 f0       	breq	.+44     	; 0x11c0 <DIO_GET_PORT_VAL+0x86>
    1194:	1b c0       	rjmp	.+54     	; 0x11cc <DIO_GET_PORT_VAL+0x92>
		case DIO_PORTA:
			* copy_u8val=PINA; break;
    1196:	e9 e3       	ldi	r30, 0x39	; 57
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	eb 81       	ldd	r30, Y+3	; 0x03
    119e:	fc 81       	ldd	r31, Y+4	; 0x04
    11a0:	80 83       	st	Z, r24
    11a2:	14 c0       	rjmp	.+40     	; 0x11cc <DIO_GET_PORT_VAL+0x92>
		case DIO_PORTB:
					* copy_u8val=PINB; break;
    11a4:	e6 e3       	ldi	r30, 0x36	; 54
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	eb 81       	ldd	r30, Y+3	; 0x03
    11ac:	fc 81       	ldd	r31, Y+4	; 0x04
    11ae:	80 83       	st	Z, r24
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <DIO_GET_PORT_VAL+0x92>
		case DIO_PORTC:
					* copy_u8val=PINC; break;
    11b2:	e3 e3       	ldi	r30, 0x33	; 51
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	eb 81       	ldd	r30, Y+3	; 0x03
    11ba:	fc 81       	ldd	r31, Y+4	; 0x04
    11bc:	80 83       	st	Z, r24
    11be:	06 c0       	rjmp	.+12     	; 0x11cc <DIO_GET_PORT_VAL+0x92>
		case DIO_PORTD:
					* copy_u8val=PINC; break;
    11c0:	e3 e3       	ldi	r30, 0x33	; 51
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	eb 81       	ldd	r30, Y+3	; 0x03
    11c8:	fc 81       	ldd	r31, Y+4	; 0x04
    11ca:	80 83       	st	Z, r24

		}
		LOCAL_ERROR=OK;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
		}
return LOCAL_ERROR;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d2:	26 96       	adiw	r28, 0x06	; 6
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <DIO_TOGGLE_PIN>:

u8 DIO_TOGGLE_PIN(u8 copy_u8port,u8 copy_u8pin){
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <DIO_TOGGLE_PIN+0x6>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <DIO_TOGGLE_PIN+0x8>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	8a 83       	std	Y+2, r24	; 0x02
    11f4:	6b 83       	std	Y+3, r22	; 0x03

	u8 LOCAL_ERROR=DIO_NOK;
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	89 83       	std	Y+1, r24	; 0x01
		if((copy_u8port<=3)&&(copy_u8pin<=7)){
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <DIO_TOGGLE_PIN+0x1e>
    1200:	74 c0       	rjmp	.+232    	; 0x12ea <DIO_TOGGLE_PIN+0x106>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 30       	cpi	r24, 0x08	; 8
    1206:	08 f0       	brcs	.+2      	; 0x120a <DIO_TOGGLE_PIN+0x26>
    1208:	70 c0       	rjmp	.+224    	; 0x12ea <DIO_TOGGLE_PIN+0x106>
			switch(copy_u8port){
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3d 83       	std	Y+5, r19	; 0x05
    1212:	2c 83       	std	Y+4, r18	; 0x04
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	49 f1       	breq	.+82     	; 0x1270 <DIO_TOGGLE_PIN+0x8c>
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	3d 81       	ldd	r19, Y+5	; 0x05
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	2c f4       	brge	.+10     	; 0x1232 <DIO_TOGGLE_PIN+0x4e>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	61 f0       	breq	.+24     	; 0x1248 <DIO_TOGGLE_PIN+0x64>
    1230:	5a c0       	rjmp	.+180    	; 0x12e6 <DIO_TOGGLE_PIN+0x102>
    1232:	2c 81       	ldd	r18, Y+4	; 0x04
    1234:	3d 81       	ldd	r19, Y+5	; 0x05
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	71 f1       	breq	.+92     	; 0x1298 <DIO_TOGGLE_PIN+0xb4>
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	e9 f1       	breq	.+122    	; 0x12c0 <DIO_TOGGLE_PIN+0xdc>
    1246:	4f c0       	rjmp	.+158    	; 0x12e6 <DIO_TOGGLE_PIN+0x102>
			case DIO_PORTA:
				TOGGLE_BIT(PORTA,copy_u8pin);
    1248:	ab e3       	ldi	r26, 0x3B	; 59
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_TOGGLE_PIN+0x82>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_TOGGLE_PIN+0x7e>
    126a:	84 27       	eor	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	3b c0       	rjmp	.+118    	; 0x12e6 <DIO_TOGGLE_PIN+0x102>
				break;
			case DIO_PORTB:
				TOGGLE_BIT(PORTB,copy_u8pin);;
    1270:	a8 e3       	ldi	r26, 0x38	; 56
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e8 e3       	ldi	r30, 0x38	; 56
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO_TOGGLE_PIN+0xaa>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO_TOGGLE_PIN+0xa6>
    1292:	84 27       	eor	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	27 c0       	rjmp	.+78     	; 0x12e6 <DIO_TOGGLE_PIN+0x102>
				break;
			case DIO_PORTC:
				TOGGLE_BIT(PORTC,copy_u8pin);
    1298:	a5 e3       	ldi	r26, 0x35	; 53
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e5 e3       	ldi	r30, 0x35	; 53
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_TOGGLE_PIN+0xd2>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_TOGGLE_PIN+0xce>
    12ba:	84 27       	eor	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	13 c0       	rjmp	.+38     	; 0x12e6 <DIO_TOGGLE_PIN+0x102>
						break;
			case DIO_PORTD:
				TOGGLE_BIT(PORTD,copy_u8pin);
    12c0:	a2 e3       	ldi	r26, 0x32	; 50
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e2 e3       	ldi	r30, 0x32	; 50
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_TOGGLE_PIN+0xfa>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_TOGGLE_PIN+0xf6>
    12e2:	84 27       	eor	r24, r20
    12e4:	8c 93       	st	X, r24
						break;

			}
			LOCAL_ERROR=OK;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
		}
	return LOCAL_ERROR;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
	}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <LCD_voidInit>:
#include <util/delay.h>


u8 static count=0;

void LCD_voidInit(LCD_cofig *lcd){
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	61 97       	sbiw	r28, 0x11	; 17
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	99 8b       	std	Y+17, r25	; 0x11
    1312:	88 8b       	std	Y+16, r24	; 0x10
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a0 e2       	ldi	r26, 0x20	; 32
    131a:	b2 e4       	ldi	r27, 0x42	; 66
    131c:	8b 87       	std	Y+11, r24	; 0x0b
    131e:	9c 87       	std	Y+12, r25	; 0x0c
    1320:	ad 87       	std	Y+13, r26	; 0x0d
    1322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1324:	6b 85       	ldd	r22, Y+11	; 0x0b
    1326:	7c 85       	ldd	r23, Y+12	; 0x0c
    1328:	8d 85       	ldd	r24, Y+13	; 0x0d
    132a:	9e 85       	ldd	r25, Y+14	; 0x0e
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	8f 83       	std	Y+7, r24	; 0x07
    133e:	98 87       	std	Y+8, r25	; 0x08
    1340:	a9 87       	std	Y+9, r26	; 0x09
    1342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1344:	6f 81       	ldd	r22, Y+7	; 0x07
    1346:	78 85       	ldd	r23, Y+8	; 0x08
    1348:	89 85       	ldd	r24, Y+9	; 0x09
    134a:	9a 85       	ldd	r25, Y+10	; 0x0a
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e8       	ldi	r20, 0x80	; 128
    1352:	5f e3       	ldi	r21, 0x3F	; 63
    1354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1358:	88 23       	and	r24, r24
    135a:	2c f4       	brge	.+10     	; 0x1366 <LCD_voidInit+0x6a>
		__ticks = 1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	3f c0       	rjmp	.+126    	; 0x13e4 <LCD_voidInit+0xe8>
	else if (__tmp > 65535)
    1366:	6f 81       	ldd	r22, Y+7	; 0x07
    1368:	78 85       	ldd	r23, Y+8	; 0x08
    136a:	89 85       	ldd	r24, Y+9	; 0x09
    136c:	9a 85       	ldd	r25, Y+10	; 0x0a
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	3f ef       	ldi	r19, 0xFF	; 255
    1372:	4f e7       	ldi	r20, 0x7F	; 127
    1374:	57 e4       	ldi	r21, 0x47	; 71
    1376:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    137a:	18 16       	cp	r1, r24
    137c:	4c f5       	brge	.+82     	; 0x13d0 <LCD_voidInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1380:	7c 85       	ldd	r23, Y+12	; 0x0c
    1382:	8d 85       	ldd	r24, Y+13	; 0x0d
    1384:	9e 85       	ldd	r25, Y+14	; 0x0e
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e2       	ldi	r20, 0x20	; 32
    138c:	51 e4       	ldi	r21, 0x41	; 65
    138e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9e 83       	std	Y+6, r25	; 0x06
    13a4:	8d 83       	std	Y+5, r24	; 0x05
    13a6:	0f c0       	rjmp	.+30     	; 0x13c6 <LCD_voidInit+0xca>
    13a8:	88 ec       	ldi	r24, 0xC8	; 200
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9c 83       	std	Y+4, r25	; 0x04
    13ae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <LCD_voidInit+0xb8>
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	69 f7       	brne	.-38     	; 0x13a8 <LCD_voidInit+0xac>
    13ce:	14 c0       	rjmp	.+40     	; 0x13f8 <LCD_voidInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d0:	6f 81       	ldd	r22, Y+7	; 0x07
    13d2:	78 85       	ldd	r23, Y+8	; 0x08
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	9a 83       	std	Y+2, r25	; 0x02
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	9a 81       	ldd	r25, Y+2	; 0x02
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <LCD_voidInit+0xf4>
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
    //SET pins
	DIO_SET_PIN_DIR(lcd->EN.port,lcd->EN.pin,DIO_OUTPUT);
    13f8:	e8 89       	ldd	r30, Y+16	; 0x10
    13fa:	f9 89       	ldd	r31, Y+17	; 0x11
    13fc:	85 81       	ldd	r24, Z+5	; 0x05
    13fe:	e8 89       	ldd	r30, Y+16	; 0x10
    1400:	f9 89       	ldd	r31, Y+17	; 0x11
    1402:	94 81       	ldd	r25, Z+4	; 0x04
    1404:	69 2f       	mov	r22, r25
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(lcd->RS.port,lcd->RS.pin,DIO_OUTPUT);
    140c:	e8 89       	ldd	r30, Y+16	; 0x10
    140e:	f9 89       	ldd	r31, Y+17	; 0x11
    1410:	81 81       	ldd	r24, Z+1	; 0x01
    1412:	e8 89       	ldd	r30, Y+16	; 0x10
    1414:	f9 89       	ldd	r31, Y+17	; 0x11
    1416:	90 81       	ld	r25, Z
    1418:	69 2f       	mov	r22, r25
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(lcd->RW.port,lcd->RW.pin,DIO_OUTPUT);
    1420:	e8 89       	ldd	r30, Y+16	; 0x10
    1422:	f9 89       	ldd	r31, Y+17	; 0x11
    1424:	83 81       	ldd	r24, Z+3	; 0x03
    1426:	e8 89       	ldd	r30, Y+16	; 0x10
    1428:	f9 89       	ldd	r31, Y+17	; 0x11
    142a:	92 81       	ldd	r25, Z+2	; 0x02
    142c:	69 2f       	mov	r22, r25
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_VAL(lcd->EN.port,lcd->EN.pin,DIO_LOW);
    1434:	e8 89       	ldd	r30, Y+16	; 0x10
    1436:	f9 89       	ldd	r31, Y+17	; 0x11
    1438:	85 81       	ldd	r24, Z+5	; 0x05
    143a:	e8 89       	ldd	r30, Y+16	; 0x10
    143c:	f9 89       	ldd	r31, Y+17	; 0x11
    143e:	94 81       	ldd	r25, Z+4	; 0x04
    1440:	69 2f       	mov	r22, r25
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
#if BIT_MODE==LCD_4BIT_MODE
	for(u8 i=0;i<=4;i++){
    1448:	1f 86       	std	Y+15, r1	; 0x0f
    144a:	20 c0       	rjmp	.+64     	; 0x148c <LCD_voidInit+0x190>
		DIO_SET_PIN_DIR(lcd->data[i].port,lcd->data[i].pin,DIO_OUTPUT);
    144c:	8f 85       	ldd	r24, Y+15	; 0x0f
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	28 89       	ldd	r18, Y+16	; 0x10
    1454:	39 89       	ldd	r19, Y+17	; 0x11
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	82 0f       	add	r24, r18
    145c:	93 1f       	adc	r25, r19
    145e:	fc 01       	movw	r30, r24
    1460:	37 96       	adiw	r30, 0x07	; 7
    1462:	40 81       	ld	r20, Z
    1464:	8f 85       	ldd	r24, Y+15	; 0x0f
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	28 89       	ldd	r18, Y+16	; 0x10
    146c:	39 89       	ldd	r19, Y+17	; 0x11
    146e:	03 96       	adiw	r24, 0x03	; 3
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	f9 01       	movw	r30, r18
    1476:	e8 0f       	add	r30, r24
    1478:	f9 1f       	adc	r31, r25
    147a:	90 81       	ld	r25, Z
    147c:	84 2f       	mov	r24, r20
    147e:	69 2f       	mov	r22, r25
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(lcd->EN.port,lcd->EN.pin,DIO_OUTPUT);
	DIO_SET_PIN_DIR(lcd->RS.port,lcd->RS.pin,DIO_OUTPUT);
	DIO_SET_PIN_DIR(lcd->RW.port,lcd->RW.pin,DIO_OUTPUT);
	DIO_SET_PIN_VAL(lcd->EN.port,lcd->EN.pin,DIO_LOW);
#if BIT_MODE==LCD_4BIT_MODE
	for(u8 i=0;i<=4;i++){
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	8f 5f       	subi	r24, 0xFF	; 255
    148a:	8f 87       	std	Y+15, r24	; 0x0f
    148c:	8f 85       	ldd	r24, Y+15	; 0x0f
    148e:	85 30       	cpi	r24, 0x05	; 5
    1490:	e8 f2       	brcs	.-70     	; 0x144c <LCD_voidInit+0x150>
	LCD_sendCommand(lcd,0x01);
	_delay_ms(2);
	LCD_sendCommand(lcd,0x06);*/


	    LCD_sendCommand(lcd, _LCD_RETURN_HOME); // Must Be First Command in 4bit mode
    1492:	88 89       	ldd	r24, Y+16	; 0x10
    1494:	99 89       	ldd	r25, Y+17	; 0x11
    1496:	62 e0       	ldi	r22, 0x02	; 2
    1498:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>
		LCD_sendCommand(lcd, _LCD_4BIT_MODE);
    149c:	88 89       	ldd	r24, Y+16	; 0x10
    149e:	99 89       	ldd	r25, Y+17	; 0x11
    14a0:	60 e2       	ldi	r22, 0x20	; 32
    14a2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>
		LCD_sendCommand(lcd, _LCD_4BIT_MODE | _LCD_2LINE | _LCD_DOT_MATRIX_7);
    14a6:	88 89       	ldd	r24, Y+16	; 0x10
    14a8:	99 89       	ldd	r25, Y+17	; 0x11
    14aa:	68 e2       	ldi	r22, 0x28	; 40
    14ac:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>

		// Send command to clear Screen
	 	LCD_sendCommand(lcd, _LCD_CLEAR);
    14b0:	88 89       	ldd	r24, Y+16	; 0x10
    14b2:	99 89       	ldd	r25, Y+17	; 0x11
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>
		// Send command to Display on and Blink cursor on
		LCD_sendCommand(lcd, _LCD_DISPLAY_ON | _LCD_UNDERLINE_CURSOR_ON);
    14ba:	88 89       	ldd	r24, Y+16	; 0x10
    14bc:	99 89       	ldd	r25, Y+17	; 0x11
    14be:	6e e0       	ldi	r22, 0x0E	; 14
    14c0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>
		// Send command to set cursor increamenet toward right after writing without shift display
		LCD_sendCommand(lcd, _LCD_INC_CURSOR_SHIFT_OFF);
    14c4:	88 89       	ldd	r24, Y+16	; 0x10
    14c6:	99 89       	ldd	r25, Y+17	; 0x11
    14c8:	66 e0       	ldi	r22, 0x06	; 6
    14ca:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>
		// Send command that i ready to recieve data so i make the AC (Address counter) to First address in DDRAM
		LCD_sendCommand(lcd, _LCD_DDRAM_START);
    14ce:	88 89       	ldd	r24, Y+16	; 0x10
    14d0:	99 89       	ldd	r25, Y+17	; 0x11
    14d2:	60 e8       	ldi	r22, 0x80	; 128
    14d4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>

}
    14d8:	61 96       	adiw	r28, 0x11	; 17
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <LCD_sendChar>:



void LCD_sendChar(LCD_cofig* lcd,u8 data){
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	c0 54       	subi	r28, 0x40	; 64
    14f4:	d0 40       	sbci	r29, 0x00	; 0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	9f af       	std	Y+63, r25	; 0x3f
    1502:	8e af       	std	Y+62, r24	; 0x3e
    1504:	fe 01       	movw	r30, r28
    1506:	e0 5c       	subi	r30, 0xC0	; 192
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	60 83       	st	Z, r22

	//RS,-> HIGH to write data
		DIO_SET_PIN_VAL(lcd->RS.port,lcd->RS.pin,DIO_HIGH);
    150c:	ee ad       	ldd	r30, Y+62	; 0x3e
    150e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1510:	81 81       	ldd	r24, Z+1	; 0x01
    1512:	ee ad       	ldd	r30, Y+62	; 0x3e
    1514:	ff ad       	ldd	r31, Y+63	; 0x3f
    1516:	90 81       	ld	r25, Z
    1518:	69 2f       	mov	r22, r25
    151a:	41 e0       	ldi	r20, 0x01	; 1
    151c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
		DIO_SET_PIN_VAL(lcd->RW.port,lcd->RW.pin,DIO_LOW);
    1520:	ee ad       	ldd	r30, Y+62	; 0x3e
    1522:	ff ad       	ldd	r31, Y+63	; 0x3f
    1524:	83 81       	ldd	r24, Z+3	; 0x03
    1526:	ee ad       	ldd	r30, Y+62	; 0x3e
    1528:	ff ad       	ldd	r31, Y+63	; 0x3f
    152a:	92 81       	ldd	r25, Z+2	; 0x02
    152c:	69 2f       	mov	r22, r25
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
		//enable ->low
		DIO_SET_PIN_VAL(lcd->EN.port,lcd->EN.pin,DIO_LOW);
    1534:	ee ad       	ldd	r30, Y+62	; 0x3e
    1536:	ff ad       	ldd	r31, Y+63	; 0x3f
    1538:	85 81       	ldd	r24, Z+5	; 0x05
    153a:	ee ad       	ldd	r30, Y+62	; 0x3e
    153c:	ff ad       	ldd	r31, Y+63	; 0x3f
    153e:	94 81       	ldd	r25, Z+4	; 0x04
    1540:	69 2f       	mov	r22, r25
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>

	#if BIT_MODE==LCD_4BIT_MODE
		if(count==16){
    1548:	80 91 86 00 	lds	r24, 0x0086
    154c:	80 31       	cpi	r24, 0x10	; 16
    154e:	39 f4       	brne	.+14     	; 0x155e <LCD_sendChar+0x74>
						LCD_setCursor(lcd,ROW2,1);
    1550:	8e ad       	ldd	r24, Y+62	; 0x3e
    1552:	9f ad       	ldd	r25, Y+63	; 0x3f
    1554:	62 e0       	ldi	r22, 0x02	; 2
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_setCursor>
    155c:	10 c0       	rjmp	.+32     	; 0x157e <LCD_sendChar+0x94>
					}
					else if(count==32){
    155e:	80 91 86 00 	lds	r24, 0x0086
    1562:	80 32       	cpi	r24, 0x20	; 32
    1564:	61 f4       	brne	.+24     	; 0x157e <LCD_sendChar+0x94>
						LCD_clear(lcd);
    1566:	8e ad       	ldd	r24, Y+62	; 0x3e
    1568:	9f ad       	ldd	r25, Y+63	; 0x3f
    156a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clear>
						LCD_setCursor(lcd,ROW1,0);
    156e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1570:	9f ad       	ldd	r25, Y+63	; 0x3f
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_setCursor>
						count=0;
    157a:	10 92 86 00 	sts	0x0086, r1
					}

		u8 temp;
		temp=( data>>4)&0x0f;
    157e:	fe 01       	movw	r30, r28
    1580:	e0 5c       	subi	r30, 0xC0	; 192
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	80 81       	ld	r24, Z
    1586:	82 95       	swap	r24
    1588:	8f 70       	andi	r24, 0x0F	; 15
    158a:	8d af       	std	Y+61, r24	; 0x3d
		for(int i=0;i<4;i++){
    158c:	1c ae       	std	Y+60, r1	; 0x3c
    158e:	1b ae       	std	Y+59, r1	; 0x3b
    1590:	2b c0       	rjmp	.+86     	; 0x15e8 <LCD_sendChar+0xfe>

			DIO_SET_PIN_VAL(lcd->data[i].port,lcd->data[i].pin,(temp>>i)&0x01);
    1592:	8b ad       	ldd	r24, Y+59	; 0x3b
    1594:	9c ad       	ldd	r25, Y+60	; 0x3c
    1596:	2e ad       	ldd	r18, Y+62	; 0x3e
    1598:	3f ad       	ldd	r19, Y+63	; 0x3f
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	82 0f       	add	r24, r18
    15a0:	93 1f       	adc	r25, r19
    15a2:	fc 01       	movw	r30, r24
    15a4:	37 96       	adiw	r30, 0x07	; 7
    15a6:	40 81       	ld	r20, Z
    15a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    15aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    15ac:	2e ad       	ldd	r18, Y+62	; 0x3e
    15ae:	3f ad       	ldd	r19, Y+63	; 0x3f
    15b0:	03 96       	adiw	r24, 0x03	; 3
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	f9 01       	movw	r30, r18
    15b8:	e8 0f       	add	r30, r24
    15ba:	f9 1f       	adc	r31, r25
    15bc:	20 81       	ld	r18, Z
    15be:	8d ad       	ldd	r24, Y+61	; 0x3d
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0b ac       	ldd	r0, Y+59	; 0x3b
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <LCD_sendChar+0xe2>
    15c8:	95 95       	asr	r25
    15ca:	87 95       	ror	r24
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <LCD_sendChar+0xde>
    15d0:	98 2f       	mov	r25, r24
    15d2:	91 70       	andi	r25, 0x01	; 1
    15d4:	84 2f       	mov	r24, r20
    15d6:	62 2f       	mov	r22, r18
    15d8:	49 2f       	mov	r20, r25
    15da:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
						count=0;
					}

		u8 temp;
		temp=( data>>4)&0x0f;
		for(int i=0;i<4;i++){
    15de:	8b ad       	ldd	r24, Y+59	; 0x3b
    15e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	9c af       	std	Y+60, r25	; 0x3c
    15e6:	8b af       	std	Y+59, r24	; 0x3b
    15e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    15ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    15ec:	84 30       	cpi	r24, 0x04	; 4
    15ee:	91 05       	cpc	r25, r1
    15f0:	84 f2       	brlt	.-96     	; 0x1592 <LCD_sendChar+0xa8>

			DIO_SET_PIN_VAL(lcd->data[i].port,lcd->data[i].pin,(temp>>i)&0x01);

		}

		DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_HIGH);
    15f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    15f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    15f6:	85 81       	ldd	r24, Z+5	; 0x05
    15f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    15fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    15fc:	94 81       	ldd	r25, Z+4	; 0x04
    15fe:	69 2f       	mov	r22, r25
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e8       	ldi	r26, 0x80	; 128
    160c:	bf e3       	ldi	r27, 0x3F	; 63
    160e:	8d ab       	std	Y+53, r24	; 0x35
    1610:	9e ab       	std	Y+54, r25	; 0x36
    1612:	af ab       	std	Y+55, r26	; 0x37
    1614:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1616:	6d a9       	ldd	r22, Y+53	; 0x35
    1618:	7e a9       	ldd	r23, Y+54	; 0x36
    161a:	8f a9       	ldd	r24, Y+55	; 0x37
    161c:	98 ad       	ldd	r25, Y+56	; 0x38
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	4a ef       	ldi	r20, 0xFA	; 250
    1624:	54 e4       	ldi	r21, 0x44	; 68
    1626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	89 ab       	std	Y+49, r24	; 0x31
    1630:	9a ab       	std	Y+50, r25	; 0x32
    1632:	ab ab       	std	Y+51, r26	; 0x33
    1634:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1636:	69 a9       	ldd	r22, Y+49	; 0x31
    1638:	7a a9       	ldd	r23, Y+50	; 0x32
    163a:	8b a9       	ldd	r24, Y+51	; 0x33
    163c:	9c a9       	ldd	r25, Y+52	; 0x34
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	2c f4       	brge	.+10     	; 0x1658 <LCD_sendChar+0x16e>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	98 ab       	std	Y+48, r25	; 0x30
    1654:	8f a7       	std	Y+47, r24	; 0x2f
    1656:	3f c0       	rjmp	.+126    	; 0x16d6 <LCD_sendChar+0x1ec>
	else if (__tmp > 65535)
    1658:	69 a9       	ldd	r22, Y+49	; 0x31
    165a:	7a a9       	ldd	r23, Y+50	; 0x32
    165c:	8b a9       	ldd	r24, Y+51	; 0x33
    165e:	9c a9       	ldd	r25, Y+52	; 0x34
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	3f ef       	ldi	r19, 0xFF	; 255
    1664:	4f e7       	ldi	r20, 0x7F	; 127
    1666:	57 e4       	ldi	r21, 0x47	; 71
    1668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    166c:	18 16       	cp	r1, r24
    166e:	4c f5       	brge	.+82     	; 0x16c2 <LCD_sendChar+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1670:	6d a9       	ldd	r22, Y+53	; 0x35
    1672:	7e a9       	ldd	r23, Y+54	; 0x36
    1674:	8f a9       	ldd	r24, Y+55	; 0x37
    1676:	98 ad       	ldd	r25, Y+56	; 0x38
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e2       	ldi	r20, 0x20	; 32
    167e:	51 e4       	ldi	r21, 0x41	; 65
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	98 ab       	std	Y+48, r25	; 0x30
    1696:	8f a7       	std	Y+47, r24	; 0x2f
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <LCD_sendChar+0x1ce>
    169a:	88 ec       	ldi	r24, 0xC8	; 200
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	9e a7       	std	Y+46, r25	; 0x2e
    16a0:	8d a7       	std	Y+45, r24	; 0x2d
    16a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <LCD_sendChar+0x1bc>
    16aa:	9e a7       	std	Y+46, r25	; 0x2e
    16ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b0:	98 a9       	ldd	r25, Y+48	; 0x30
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	98 ab       	std	Y+48, r25	; 0x30
    16b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ba:	98 a9       	ldd	r25, Y+48	; 0x30
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f7       	brne	.-38     	; 0x169a <LCD_sendChar+0x1b0>
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <LCD_sendChar+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	69 a9       	ldd	r22, Y+49	; 0x31
    16c4:	7a a9       	ldd	r23, Y+50	; 0x32
    16c6:	8b a9       	ldd	r24, Y+51	; 0x33
    16c8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	98 ab       	std	Y+48, r25	; 0x30
    16d4:	8f a7       	std	Y+47, r24	; 0x2f
    16d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d8:	98 a9       	ldd	r25, Y+48	; 0x30
    16da:	9c a7       	std	Y+44, r25	; 0x2c
    16dc:	8b a7       	std	Y+43, r24	; 0x2b
    16de:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <LCD_sendChar+0x1f8>
    16e6:	9c a7       	std	Y+44, r25	; 0x2c
    16e8:	8b a7       	std	Y+43, r24	; 0x2b
		    _delay_ms(1);
		    DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_LOW);
    16ea:	ee ad       	ldd	r30, Y+62	; 0x3e
    16ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    16ee:	85 81       	ldd	r24, Z+5	; 0x05
    16f0:	ee ad       	ldd	r30, Y+62	; 0x3e
    16f2:	ff ad       	ldd	r31, Y+63	; 0x3f
    16f4:	94 81       	ldd	r25, Z+4	; 0x04
    16f6:	69 2f       	mov	r22, r25
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e8       	ldi	r26, 0x80	; 128
    1704:	bf e3       	ldi	r27, 0x3F	; 63
    1706:	8f a3       	std	Y+39, r24	; 0x27
    1708:	98 a7       	std	Y+40, r25	; 0x28
    170a:	a9 a7       	std	Y+41, r26	; 0x29
    170c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170e:	6f a1       	ldd	r22, Y+39	; 0x27
    1710:	78 a5       	ldd	r23, Y+40	; 0x28
    1712:	89 a5       	ldd	r24, Y+41	; 0x29
    1714:	9a a5       	ldd	r25, Y+42	; 0x2a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a ef       	ldi	r20, 0xFA	; 250
    171c:	54 e4       	ldi	r21, 0x44	; 68
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	8b a3       	std	Y+35, r24	; 0x23
    1728:	9c a3       	std	Y+36, r25	; 0x24
    172a:	ad a3       	std	Y+37, r26	; 0x25
    172c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    172e:	6b a1       	ldd	r22, Y+35	; 0x23
    1730:	7c a1       	ldd	r23, Y+36	; 0x24
    1732:	8d a1       	ldd	r24, Y+37	; 0x25
    1734:	9e a1       	ldd	r25, Y+38	; 0x26
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	2c f4       	brge	.+10     	; 0x1750 <LCD_sendChar+0x266>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9a a3       	std	Y+34, r25	; 0x22
    174c:	89 a3       	std	Y+33, r24	; 0x21
    174e:	3f c0       	rjmp	.+126    	; 0x17ce <LCD_sendChar+0x2e4>
	else if (__tmp > 65535)
    1750:	6b a1       	ldd	r22, Y+35	; 0x23
    1752:	7c a1       	ldd	r23, Y+36	; 0x24
    1754:	8d a1       	ldd	r24, Y+37	; 0x25
    1756:	9e a1       	ldd	r25, Y+38	; 0x26
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	4c f5       	brge	.+82     	; 0x17ba <LCD_sendChar+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1768:	6f a1       	ldd	r22, Y+39	; 0x27
    176a:	78 a5       	ldd	r23, Y+40	; 0x28
    176c:	89 a5       	ldd	r24, Y+41	; 0x29
    176e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9a a3       	std	Y+34, r25	; 0x22
    178e:	89 a3       	std	Y+33, r24	; 0x21
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <LCD_sendChar+0x2c6>
    1792:	88 ec       	ldi	r24, 0xC8	; 200
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	98 a3       	std	Y+32, r25	; 0x20
    1798:	8f 8f       	std	Y+31, r24	; 0x1f
    179a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    179c:	98 a1       	ldd	r25, Y+32	; 0x20
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <LCD_sendChar+0x2b4>
    17a2:	98 a3       	std	Y+32, r25	; 0x20
    17a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	89 a1       	ldd	r24, Y+33	; 0x21
    17a8:	9a a1       	ldd	r25, Y+34	; 0x22
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	9a a3       	std	Y+34, r25	; 0x22
    17ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b0:	89 a1       	ldd	r24, Y+33	; 0x21
    17b2:	9a a1       	ldd	r25, Y+34	; 0x22
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	69 f7       	brne	.-38     	; 0x1792 <LCD_sendChar+0x2a8>
    17b8:	14 c0       	rjmp	.+40     	; 0x17e2 <LCD_sendChar+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ba:	6b a1       	ldd	r22, Y+35	; 0x23
    17bc:	7c a1       	ldd	r23, Y+36	; 0x24
    17be:	8d a1       	ldd	r24, Y+37	; 0x25
    17c0:	9e a1       	ldd	r25, Y+38	; 0x26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9a a3       	std	Y+34, r25	; 0x22
    17cc:	89 a3       	std	Y+33, r24	; 0x21
    17ce:	89 a1       	ldd	r24, Y+33	; 0x21
    17d0:	9a a1       	ldd	r25, Y+34	; 0x22
    17d2:	9e 8f       	std	Y+30, r25	; 0x1e
    17d4:	8d 8f       	std	Y+29, r24	; 0x1d
    17d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_sendChar+0x2f0>
    17de:	9e 8f       	std	Y+30, r25	; 0x1e
    17e0:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(1);


		temp=data&0x0f;
    17e2:	fe 01       	movw	r30, r28
    17e4:	e0 5c       	subi	r30, 0xC0	; 192
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 70       	andi	r24, 0x0F	; 15
    17ec:	8d af       	std	Y+61, r24	; 0x3d
		for(int i=0;i<4;i++){
    17ee:	1a ae       	std	Y+58, r1	; 0x3a
    17f0:	19 ae       	std	Y+57, r1	; 0x39
    17f2:	2b c0       	rjmp	.+86     	; 0x184a <LCD_sendChar+0x360>
				DIO_SET_PIN_VAL(lcd->data[i].port,lcd->data[i].pin,(temp>>i)&0x01);
    17f4:	89 ad       	ldd	r24, Y+57	; 0x39
    17f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    17f8:	2e ad       	ldd	r18, Y+62	; 0x3e
    17fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	82 0f       	add	r24, r18
    1802:	93 1f       	adc	r25, r19
    1804:	fc 01       	movw	r30, r24
    1806:	37 96       	adiw	r30, 0x07	; 7
    1808:	40 81       	ld	r20, Z
    180a:	89 ad       	ldd	r24, Y+57	; 0x39
    180c:	9a ad       	ldd	r25, Y+58	; 0x3a
    180e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1810:	3f ad       	ldd	r19, Y+63	; 0x3f
    1812:	03 96       	adiw	r24, 0x03	; 3
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	f9 01       	movw	r30, r18
    181a:	e8 0f       	add	r30, r24
    181c:	f9 1f       	adc	r31, r25
    181e:	20 81       	ld	r18, Z
    1820:	8d ad       	ldd	r24, Y+61	; 0x3d
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	09 ac       	ldd	r0, Y+57	; 0x39
    1828:	02 c0       	rjmp	.+4      	; 0x182e <LCD_sendChar+0x344>
    182a:	95 95       	asr	r25
    182c:	87 95       	ror	r24
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <LCD_sendChar+0x340>
    1832:	98 2f       	mov	r25, r24
    1834:	91 70       	andi	r25, 0x01	; 1
    1836:	84 2f       	mov	r24, r20
    1838:	62 2f       	mov	r22, r18
    183a:	49 2f       	mov	r20, r25
    183c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
		    DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_LOW);
		    _delay_ms(1);


		temp=data&0x0f;
		for(int i=0;i<4;i++){
    1840:	89 ad       	ldd	r24, Y+57	; 0x39
    1842:	9a ad       	ldd	r25, Y+58	; 0x3a
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	9a af       	std	Y+58, r25	; 0x3a
    1848:	89 af       	std	Y+57, r24	; 0x39
    184a:	89 ad       	ldd	r24, Y+57	; 0x39
    184c:	9a ad       	ldd	r25, Y+58	; 0x3a
    184e:	84 30       	cpi	r24, 0x04	; 4
    1850:	91 05       	cpc	r25, r1
    1852:	84 f2       	brlt	.-96     	; 0x17f4 <LCD_sendChar+0x30a>
	#endif
	//enable ->HIGH
				//	_delay_ms(20);
	//DIO_SET_PIN_VAL(lcd->EN.port,lcd->EN.pin,DIO_HIGH);

					DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_HIGH);
    1854:	ee ad       	ldd	r30, Y+62	; 0x3e
    1856:	ff ad       	ldd	r31, Y+63	; 0x3f
    1858:	85 81       	ldd	r24, Z+5	; 0x05
    185a:	ee ad       	ldd	r30, Y+62	; 0x3e
    185c:	ff ad       	ldd	r31, Y+63	; 0x3f
    185e:	94 81       	ldd	r25, Z+4	; 0x04
    1860:	69 2f       	mov	r22, r25
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e8       	ldi	r26, 0x80	; 128
    186e:	bf e3       	ldi	r27, 0x3F	; 63
    1870:	89 8f       	std	Y+25, r24	; 0x19
    1872:	9a 8f       	std	Y+26, r25	; 0x1a
    1874:	ab 8f       	std	Y+27, r26	; 0x1b
    1876:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	69 8d       	ldd	r22, Y+25	; 0x19
    187a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a ef       	ldi	r20, 0xFA	; 250
    1886:	54 e4       	ldi	r21, 0x44	; 68
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8d 8b       	std	Y+21, r24	; 0x15
    1892:	9e 8b       	std	Y+22, r25	; 0x16
    1894:	af 8b       	std	Y+23, r26	; 0x17
    1896:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1898:	6d 89       	ldd	r22, Y+21	; 0x15
    189a:	7e 89       	ldd	r23, Y+22	; 0x16
    189c:	8f 89       	ldd	r24, Y+23	; 0x17
    189e:	98 8d       	ldd	r25, Y+24	; 0x18
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ac:	88 23       	and	r24, r24
    18ae:	2c f4       	brge	.+10     	; 0x18ba <LCD_sendChar+0x3d0>
		__ticks = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9c 8b       	std	Y+20, r25	; 0x14
    18b6:	8b 8b       	std	Y+19, r24	; 0x13
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <LCD_sendChar+0x44e>
	else if (__tmp > 65535)
    18ba:	6d 89       	ldd	r22, Y+21	; 0x15
    18bc:	7e 89       	ldd	r23, Y+22	; 0x16
    18be:	8f 89       	ldd	r24, Y+23	; 0x17
    18c0:	98 8d       	ldd	r25, Y+24	; 0x18
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	4c f5       	brge	.+82     	; 0x1924 <LCD_sendChar+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	69 8d       	ldd	r22, Y+25	; 0x19
    18d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9c 8b       	std	Y+20, r25	; 0x14
    18f8:	8b 8b       	std	Y+19, r24	; 0x13
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <LCD_sendChar+0x430>
    18fc:	88 ec       	ldi	r24, 0xC8	; 200
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9a 8b       	std	Y+18, r25	; 0x12
    1902:	89 8b       	std	Y+17, r24	; 0x11
    1904:	89 89       	ldd	r24, Y+17	; 0x11
    1906:	9a 89       	ldd	r25, Y+18	; 0x12
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_sendChar+0x41e>
    190c:	9a 8b       	std	Y+18, r25	; 0x12
    190e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	8b 89       	ldd	r24, Y+19	; 0x13
    1912:	9c 89       	ldd	r25, Y+20	; 0x14
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f7       	brne	.-38     	; 0x18fc <LCD_sendChar+0x412>
    1922:	14 c0       	rjmp	.+40     	; 0x194c <LCD_sendChar+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	6d 89       	ldd	r22, Y+21	; 0x15
    1926:	7e 89       	ldd	r23, Y+22	; 0x16
    1928:	8f 89       	ldd	r24, Y+23	; 0x17
    192a:	98 8d       	ldd	r25, Y+24	; 0x18
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	98 8b       	std	Y+16, r25	; 0x10
    193e:	8f 87       	std	Y+15, r24	; 0x0f
    1940:	8f 85       	ldd	r24, Y+15	; 0x0f
    1942:	98 89       	ldd	r25, Y+16	; 0x10
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_sendChar+0x45a>
    1948:	98 8b       	std	Y+16, r25	; 0x10
    194a:	8f 87       	std	Y+15, r24	; 0x0f
					    _delay_ms(1);
					    DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_LOW);
    194c:	ee ad       	ldd	r30, Y+62	; 0x3e
    194e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1950:	85 81       	ldd	r24, Z+5	; 0x05
    1952:	ee ad       	ldd	r30, Y+62	; 0x3e
    1954:	ff ad       	ldd	r31, Y+63	; 0x3f
    1956:	94 81       	ldd	r25, Z+4	; 0x04
    1958:	69 2f       	mov	r22, r25
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a0 e8       	ldi	r26, 0x80	; 128
    1966:	bf e3       	ldi	r27, 0x3F	; 63
    1968:	8b 87       	std	Y+11, r24	; 0x0b
    196a:	9c 87       	std	Y+12, r25	; 0x0c
    196c:	ad 87       	std	Y+13, r26	; 0x0d
    196e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1970:	6b 85       	ldd	r22, Y+11	; 0x0b
    1972:	7c 85       	ldd	r23, Y+12	; 0x0c
    1974:	8d 85       	ldd	r24, Y+13	; 0x0d
    1976:	9e 85       	ldd	r25, Y+14	; 0x0e
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4a ef       	ldi	r20, 0xFA	; 250
    197e:	54 e4       	ldi	r21, 0x44	; 68
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	8f 83       	std	Y+7, r24	; 0x07
    198a:	98 87       	std	Y+8, r25	; 0x08
    198c:	a9 87       	std	Y+9, r26	; 0x09
    198e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1990:	6f 81       	ldd	r22, Y+7	; 0x07
    1992:	78 85       	ldd	r23, Y+8	; 0x08
    1994:	89 85       	ldd	r24, Y+9	; 0x09
    1996:	9a 85       	ldd	r25, Y+10	; 0x0a
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e8       	ldi	r20, 0x80	; 128
    199e:	5f e3       	ldi	r21, 0x3F	; 63
    19a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a4:	88 23       	and	r24, r24
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <LCD_sendChar+0x4c8>
		__ticks = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9e 83       	std	Y+6, r25	; 0x06
    19ae:	8d 83       	std	Y+5, r24	; 0x05
    19b0:	3f c0       	rjmp	.+126    	; 0x1a30 <LCD_sendChar+0x546>
	else if (__tmp > 65535)
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	57 e4       	ldi	r21, 0x47	; 71
    19c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	4c f5       	brge	.+82     	; 0x1a1c <LCD_sendChar+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    19cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e2       	ldi	r20, 0x20	; 32
    19d8:	51 e4       	ldi	r21, 0x41	; 65
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	bc 01       	movw	r22, r24
    19e4:	cd 01       	movw	r24, r26
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
    19f2:	0f c0       	rjmp	.+30     	; 0x1a12 <LCD_sendChar+0x528>
    19f4:	88 ec       	ldi	r24, 0xC8	; 200
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9c 83       	std	Y+4, r25	; 0x04
    19fa:	8b 83       	std	Y+3, r24	; 0x03
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LCD_sendChar+0x516>
    1a04:	9c 83       	std	Y+4, r25	; 0x04
    1a06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	69 f7       	brne	.-38     	; 0x19f4 <LCD_sendChar+0x50a>
    1a1a:	14 c0       	rjmp	.+40     	; 0x1a44 <LCD_sendChar+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	9a 83       	std	Y+2, r25	; 0x02
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_sendChar+0x552>
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	89 83       	std	Y+1, r24	; 0x01
					    _delay_ms(1);
					    count++;
    1a44:	80 91 86 00 	lds	r24, 0x0086
    1a48:	8f 5f       	subi	r24, 0xFF	; 255
    1a4a:	80 93 86 00 	sts	0x0086, r24

}
    1a4e:	c0 5c       	subi	r28, 0xC0	; 192
    1a50:	df 4f       	sbci	r29, 0xFF	; 255
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <LCD_sendCommand>:
void LCD_sendCommand(LCD_cofig* lcd,u8 command){
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	c0 54       	subi	r28, 0x40	; 64
    1a6c:	d0 40       	sbci	r29, 0x00	; 0
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	9f af       	std	Y+63, r25	; 0x3f
    1a7a:	8e af       	std	Y+62, r24	; 0x3e
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e0 5c       	subi	r30, 0xC0	; 192
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 83       	st	Z, r22
	//RS,RW -> LOW to write command
	DIO_SET_PIN_VAL(lcd->RS.port,lcd->RS.pin,DIO_LOW);
    1a84:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a86:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a88:	81 81       	ldd	r24, Z+1	; 0x01
    1a8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a8e:	90 81       	ld	r25, Z
    1a90:	69 2f       	mov	r22, r25
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
	DIO_SET_PIN_VAL(lcd->RW.port,lcd->RW.pin,DIO_LOW);
    1a98:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a9a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a9c:	83 81       	ldd	r24, Z+3	; 0x03
    1a9e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1aa0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1aa2:	92 81       	ldd	r25, Z+2	; 0x02
    1aa4:	69 2f       	mov	r22, r25
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
	//enable ->low
	DIO_SET_PIN_VAL(lcd->EN.port,lcd->EN.pin,DIO_LOW);
    1aac:	ee ad       	ldd	r30, Y+62	; 0x3e
    1aae:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ab0:	85 81       	ldd	r24, Z+5	; 0x05
    1ab2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ab4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ab6:	94 81       	ldd	r25, Z+4	; 0x04
    1ab8:	69 2f       	mov	r22, r25
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>

#if BIT_MODE==LCD_4BIT_MODE
	u8 temp;
	temp=(command>>4)& 0x0f;
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e0 5c       	subi	r30, 0xC0	; 192
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 81       	ld	r24, Z
    1ac8:	82 95       	swap	r24
    1aca:	8f 70       	andi	r24, 0x0F	; 15
    1acc:	8d af       	std	Y+61, r24	; 0x3d
	for(int i=0;i<4;i++){
    1ace:	1c ae       	std	Y+60, r1	; 0x3c
    1ad0:	1b ae       	std	Y+59, r1	; 0x3b
    1ad2:	2b c0       	rjmp	.+86     	; 0x1b2a <LCD_sendCommand+0xc8>
		DIO_SET_PIN_VAL(lcd->data[i].port,lcd->data[i].pin,(temp>>i)&0x01);
    1ad4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ad6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ad8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ada:	3f ad       	ldd	r19, Y+63	; 0x3f
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	82 0f       	add	r24, r18
    1ae2:	93 1f       	adc	r25, r19
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	37 96       	adiw	r30, 0x07	; 7
    1ae8:	40 81       	ld	r20, Z
    1aea:	8b ad       	ldd	r24, Y+59	; 0x3b
    1aec:	9c ad       	ldd	r25, Y+60	; 0x3c
    1aee:	2e ad       	ldd	r18, Y+62	; 0x3e
    1af0:	3f ad       	ldd	r19, Y+63	; 0x3f
    1af2:	03 96       	adiw	r24, 0x03	; 3
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	f9 01       	movw	r30, r18
    1afa:	e8 0f       	add	r30, r24
    1afc:	f9 1f       	adc	r31, r25
    1afe:	20 81       	ld	r18, Z
    1b00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0b ac       	ldd	r0, Y+59	; 0x3b
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <LCD_sendCommand+0xac>
    1b0a:	95 95       	asr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <LCD_sendCommand+0xa8>
    1b12:	98 2f       	mov	r25, r24
    1b14:	91 70       	andi	r25, 0x01	; 1
    1b16:	84 2f       	mov	r24, r20
    1b18:	62 2f       	mov	r22, r18
    1b1a:	49 2f       	mov	r20, r25
    1b1c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
	DIO_SET_PIN_VAL(lcd->EN.port,lcd->EN.pin,DIO_LOW);

#if BIT_MODE==LCD_4BIT_MODE
	u8 temp;
	temp=(command>>4)& 0x0f;
	for(int i=0;i<4;i++){
    1b20:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b22:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	9c af       	std	Y+60, r25	; 0x3c
    1b28:	8b af       	std	Y+59, r24	; 0x3b
    1b2a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b2c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b2e:	84 30       	cpi	r24, 0x04	; 4
    1b30:	91 05       	cpc	r25, r1
    1b32:	84 f2       	brlt	.-96     	; 0x1ad4 <LCD_sendCommand+0x72>
		DIO_SET_PIN_VAL(lcd->data[i].port,lcd->data[i].pin,(temp>>i)&0x01);
	}

	DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_HIGH);
    1b34:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b36:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b38:	85 81       	ldd	r24, Z+5	; 0x05
    1b3a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b3c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b3e:	94 81       	ldd	r25, Z+4	; 0x04
    1b40:	69 2f       	mov	r22, r25
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	8d ab       	std	Y+53, r24	; 0x35
    1b52:	9e ab       	std	Y+54, r25	; 0x36
    1b54:	af ab       	std	Y+55, r26	; 0x37
    1b56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a ef       	ldi	r20, 0xFA	; 250
    1b66:	54 e4       	ldi	r21, 0x44	; 68
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	89 ab       	std	Y+49, r24	; 0x31
    1b72:	9a ab       	std	Y+50, r25	; 0x32
    1b74:	ab ab       	std	Y+51, r26	; 0x33
    1b76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b78:	69 a9       	ldd	r22, Y+49	; 0x31
    1b7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <LCD_sendCommand+0x138>
		__ticks = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	98 ab       	std	Y+48, r25	; 0x30
    1b96:	8f a7       	std	Y+47, r24	; 0x2f
    1b98:	3f c0       	rjmp	.+126    	; 0x1c18 <LCD_sendCommand+0x1b6>
	else if (__tmp > 65535)
    1b9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	4c f5       	brge	.+82     	; 0x1c04 <LCD_sendCommand+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	98 ab       	std	Y+48, r25	; 0x30
    1bd8:	8f a7       	std	Y+47, r24	; 0x2f
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <LCD_sendCommand+0x198>
    1bdc:	88 ec       	ldi	r24, 0xC8	; 200
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9e a7       	std	Y+46, r25	; 0x2e
    1be2:	8d a7       	std	Y+45, r24	; 0x2d
    1be4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1be6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_sendCommand+0x186>
    1bec:	9e a7       	std	Y+46, r25	; 0x2e
    1bee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	98 ab       	std	Y+48, r25	; 0x30
    1bf8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	69 f7       	brne	.-38     	; 0x1bdc <LCD_sendCommand+0x17a>
    1c02:	14 c0       	rjmp	.+40     	; 0x1c2c <LCD_sendCommand+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c04:	69 a9       	ldd	r22, Y+49	; 0x31
    1c06:	7a a9       	ldd	r23, Y+50	; 0x32
    1c08:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	98 ab       	std	Y+48, r25	; 0x30
    1c16:	8f a7       	std	Y+47, r24	; 0x2f
    1c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1c:	9c a7       	std	Y+44, r25	; 0x2c
    1c1e:	8b a7       	std	Y+43, r24	; 0x2b
    1c20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_sendCommand+0x1c2>
    1c28:	9c a7       	std	Y+44, r25	; 0x2c
    1c2a:	8b a7       	std	Y+43, r24	; 0x2b
	    _delay_ms(1);
	    DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_LOW);
    1c2c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c2e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c30:	85 81       	ldd	r24, Z+5	; 0x05
    1c32:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c34:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c36:	94 81       	ldd	r25, Z+4	; 0x04
    1c38:	69 2f       	mov	r22, r25
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e8       	ldi	r26, 0x80	; 128
    1c46:	bf e3       	ldi	r27, 0x3F	; 63
    1c48:	8f a3       	std	Y+39, r24	; 0x27
    1c4a:	98 a7       	std	Y+40, r25	; 0x28
    1c4c:	a9 a7       	std	Y+41, r26	; 0x29
    1c4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c50:	6f a1       	ldd	r22, Y+39	; 0x27
    1c52:	78 a5       	ldd	r23, Y+40	; 0x28
    1c54:	89 a5       	ldd	r24, Y+41	; 0x29
    1c56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a ef       	ldi	r20, 0xFA	; 250
    1c5e:	54 e4       	ldi	r21, 0x44	; 68
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8b a3       	std	Y+35, r24	; 0x23
    1c6a:	9c a3       	std	Y+36, r25	; 0x24
    1c6c:	ad a3       	std	Y+37, r26	; 0x25
    1c6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c70:	6b a1       	ldd	r22, Y+35	; 0x23
    1c72:	7c a1       	ldd	r23, Y+36	; 0x24
    1c74:	8d a1       	ldd	r24, Y+37	; 0x25
    1c76:	9e a1       	ldd	r25, Y+38	; 0x26
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	2c f4       	brge	.+10     	; 0x1c92 <LCD_sendCommand+0x230>
		__ticks = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9a a3       	std	Y+34, r25	; 0x22
    1c8e:	89 a3       	std	Y+33, r24	; 0x21
    1c90:	3f c0       	rjmp	.+126    	; 0x1d10 <LCD_sendCommand+0x2ae>
	else if (__tmp > 65535)
    1c92:	6b a1       	ldd	r22, Y+35	; 0x23
    1c94:	7c a1       	ldd	r23, Y+36	; 0x24
    1c96:	8d a1       	ldd	r24, Y+37	; 0x25
    1c98:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	57 e4       	ldi	r21, 0x47	; 71
    1ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	4c f5       	brge	.+82     	; 0x1cfc <LCD_sendCommand+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	6f a1       	ldd	r22, Y+39	; 0x27
    1cac:	78 a5       	ldd	r23, Y+40	; 0x28
    1cae:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9a a3       	std	Y+34, r25	; 0x22
    1cd0:	89 a3       	std	Y+33, r24	; 0x21
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <LCD_sendCommand+0x290>
    1cd4:	88 ec       	ldi	r24, 0xC8	; 200
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	98 a3       	std	Y+32, r25	; 0x20
    1cda:	8f 8f       	std	Y+31, r24	; 0x1f
    1cdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cde:	98 a1       	ldd	r25, Y+32	; 0x20
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_sendCommand+0x27e>
    1ce4:	98 a3       	std	Y+32, r25	; 0x20
    1ce6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cea:	9a a1       	ldd	r25, Y+34	; 0x22
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9a a3       	std	Y+34, r25	; 0x22
    1cf0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <LCD_sendCommand+0x272>
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <LCD_sendCommand+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1d00:	8d a1       	ldd	r24, Y+37	; 0x25
    1d02:	9e a1       	ldd	r25, Y+38	; 0x26
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9a a3       	std	Y+34, r25	; 0x22
    1d0e:	89 a3       	std	Y+33, r24	; 0x21
    1d10:	89 a1       	ldd	r24, Y+33	; 0x21
    1d12:	9a a1       	ldd	r25, Y+34	; 0x22
    1d14:	9e 8f       	std	Y+30, r25	; 0x1e
    1d16:	8d 8f       	std	Y+29, r24	; 0x1d
    1d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_sendCommand+0x2ba>
    1d20:	9e 8f       	std	Y+30, r25	; 0x1e
    1d22:	8d 8f       	std	Y+29, r24	; 0x1d
	    _delay_ms(1);


	temp=command&0x0f;
    1d24:	fe 01       	movw	r30, r28
    1d26:	e0 5c       	subi	r30, 0xC0	; 192
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8f 70       	andi	r24, 0x0F	; 15
    1d2e:	8d af       	std	Y+61, r24	; 0x3d
	for(int i=0;i<4;i++){
    1d30:	1a ae       	std	Y+58, r1	; 0x3a
    1d32:	19 ae       	std	Y+57, r1	; 0x39
    1d34:	2b c0       	rjmp	.+86     	; 0x1d8c <LCD_sendCommand+0x32a>
			DIO_SET_PIN_VAL(lcd->data[i].port,lcd->data[i].pin,(temp>>i)&0x01);
    1d36:	89 ad       	ldd	r24, Y+57	; 0x39
    1d38:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d3a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d3c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	82 0f       	add	r24, r18
    1d44:	93 1f       	adc	r25, r19
    1d46:	fc 01       	movw	r30, r24
    1d48:	37 96       	adiw	r30, 0x07	; 7
    1d4a:	40 81       	ld	r20, Z
    1d4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d50:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d52:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d54:	03 96       	adiw	r24, 0x03	; 3
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	f9 01       	movw	r30, r18
    1d5c:	e8 0f       	add	r30, r24
    1d5e:	f9 1f       	adc	r31, r25
    1d60:	20 81       	ld	r18, Z
    1d62:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	09 ac       	ldd	r0, Y+57	; 0x39
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <LCD_sendCommand+0x30e>
    1d6c:	95 95       	asr	r25
    1d6e:	87 95       	ror	r24
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <LCD_sendCommand+0x30a>
    1d74:	98 2f       	mov	r25, r24
    1d76:	91 70       	andi	r25, 0x01	; 1
    1d78:	84 2f       	mov	r24, r20
    1d7a:	62 2f       	mov	r22, r18
    1d7c:	49 2f       	mov	r20, r25
    1d7e:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
	    DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_LOW);
	    _delay_ms(1);


	temp=command&0x0f;
	for(int i=0;i<4;i++){
    1d82:	89 ad       	ldd	r24, Y+57	; 0x39
    1d84:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	9a af       	std	Y+58, r25	; 0x3a
    1d8a:	89 af       	std	Y+57, r24	; 0x39
    1d8c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	91 05       	cpc	r25, r1
    1d94:	84 f2       	brlt	.-96     	; 0x1d36 <LCD_sendCommand+0x2d4>
			DIO_SET_PIN_VAL(lcd->data[i].port,lcd->data[i].pin,(temp>>i)&0x01);
		}


	DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_HIGH);
    1d96:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d98:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d9a:	85 81       	ldd	r24, Z+5	; 0x05
    1d9c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d9e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1da0:	94 81       	ldd	r25, Z+4	; 0x04
    1da2:	69 2f       	mov	r22, r25
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 e8       	ldi	r26, 0x80	; 128
    1db0:	bf e3       	ldi	r27, 0x3F	; 63
    1db2:	89 8f       	std	Y+25, r24	; 0x19
    1db4:	9a 8f       	std	Y+26, r25	; 0x1a
    1db6:	ab 8f       	std	Y+27, r26	; 0x1b
    1db8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	69 8d       	ldd	r22, Y+25	; 0x19
    1dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a ef       	ldi	r20, 0xFA	; 250
    1dc8:	54 e4       	ldi	r21, 0x44	; 68
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8d 8b       	std	Y+21, r24	; 0x15
    1dd4:	9e 8b       	std	Y+22, r25	; 0x16
    1dd6:	af 8b       	std	Y+23, r26	; 0x17
    1dd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dda:	6d 89       	ldd	r22, Y+21	; 0x15
    1ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dde:	8f 89       	ldd	r24, Y+23	; 0x17
    1de0:	98 8d       	ldd	r25, Y+24	; 0x18
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <LCD_sendCommand+0x39a>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <LCD_sendCommand+0x418>
	else if (__tmp > 65535)
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1e00:	8f 89       	ldd	r24, Y+23	; 0x17
    1e02:	98 8d       	ldd	r25, Y+24	; 0x18
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <LCD_sendCommand+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	69 8d       	ldd	r22, Y+25	; 0x19
    1e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9c 8b       	std	Y+20, r25	; 0x14
    1e3a:	8b 8b       	std	Y+19, r24	; 0x13
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <LCD_sendCommand+0x3fa>
    1e3e:	88 ec       	ldi	r24, 0xC8	; 200
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9a 8b       	std	Y+18, r25	; 0x12
    1e44:	89 8b       	std	Y+17, r24	; 0x11
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	9a 89       	ldd	r25, Y+18	; 0x12
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_sendCommand+0x3e8>
    1e4e:	9a 8b       	std	Y+18, r25	; 0x12
    1e50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	9c 8b       	std	Y+20, r25	; 0x14
    1e5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <LCD_sendCommand+0x3dc>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <LCD_sendCommand+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	6d 89       	ldd	r22, Y+21	; 0x15
    1e68:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9c 8b       	std	Y+20, r25	; 0x14
    1e78:	8b 8b       	std	Y+19, r24	; 0x13
    1e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7e:	98 8b       	std	Y+16, r25	; 0x10
    1e80:	8f 87       	std	Y+15, r24	; 0x0f
    1e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e84:	98 89       	ldd	r25, Y+16	; 0x10
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_sendCommand+0x424>
    1e8a:	98 8b       	std	Y+16, r25	; 0x10
    1e8c:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(1);
	    DIO_SET_PIN_VAL(lcd->EN.port, lcd->EN.pin, DIO_LOW);
    1e8e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e90:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e92:	85 81       	ldd	r24, Z+5	; 0x05
    1e94:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e96:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e98:	94 81       	ldd	r25, Z+4	; 0x04
    1e9a:	69 2f       	mov	r22, r25
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a0 e8       	ldi	r26, 0x80	; 128
    1ea8:	bf e3       	ldi	r27, 0x3F	; 63
    1eaa:	8b 87       	std	Y+11, r24	; 0x0b
    1eac:	9c 87       	std	Y+12, r25	; 0x0c
    1eae:	ad 87       	std	Y+13, r26	; 0x0d
    1eb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4a ef       	ldi	r20, 0xFA	; 250
    1ec0:	54 e4       	ldi	r21, 0x44	; 68
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8f 83       	std	Y+7, r24	; 0x07
    1ecc:	98 87       	std	Y+8, r25	; 0x08
    1ece:	a9 87       	std	Y+9, r26	; 0x09
    1ed0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	2c f4       	brge	.+10     	; 0x1ef4 <LCD_sendCommand+0x492>
		__ticks = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	3f c0       	rjmp	.+126    	; 0x1f72 <LCD_sendCommand+0x510>
	else if (__tmp > 65535)
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	3f ef       	ldi	r19, 0xFF	; 255
    1f00:	4f e7       	ldi	r20, 0x7F	; 127
    1f02:	57 e4       	ldi	r21, 0x47	; 71
    1f04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	4c f5       	brge	.+82     	; 0x1f5e <LCD_sendCommand+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e2       	ldi	r20, 0x20	; 32
    1f1a:	51 e4       	ldi	r21, 0x41	; 65
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <LCD_sendCommand+0x4f2>
    1f36:	88 ec       	ldi	r24, 0xC8	; 200
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_sendCommand+0x4e0>
    1f46:	9c 83       	std	Y+4, r25	; 0x04
    1f48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <LCD_sendCommand+0x4d4>
    1f5c:	14 c0       	rjmp	.+40     	; 0x1f86 <LCD_sendCommand+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f60:	78 85       	ldd	r23, Y+8	; 0x08
    1f62:	89 85       	ldd	r24, Y+9	; 0x09
    1f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_sendCommand+0x51c>
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
#endif

//enable ->HIGH
//DIO_SET_PIN_VAL(lcd->EN.port,lcd->EN.pin,DIO_HIGH);

}
    1f86:	c0 5c       	subi	r28, 0xC0	; 192
    1f88:	df 4f       	sbci	r29, 0xFF	; 255
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <LCD_sendNumber>:
void LCD_sendNumber(LCD_cofig* lcd,u32 num){
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	a0 97       	sbiw	r28, 0x20	; 32
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	9c 8f       	std	Y+28, r25	; 0x1c
    1fb4:	8b 8f       	std	Y+27, r24	; 0x1b
    1fb6:	4d 8f       	std	Y+29, r20	; 0x1d
    1fb8:	5e 8f       	std	Y+30, r21	; 0x1e
    1fba:	6f 8f       	std	Y+31, r22	; 0x1f
    1fbc:	78 a3       	std	Y+32, r23	; 0x20
	 u8 numArr[10]={0},i=0,j=0;
    1fbe:	8a e0       	ldi	r24, 0x0A	; 10
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	71 96       	adiw	r30, 0x11	; 17
    1fc4:	df 01       	movw	r26, r30
    1fc6:	98 2f       	mov	r25, r24
    1fc8:	1d 92       	st	X+, r1
    1fca:	9a 95       	dec	r25
    1fcc:	e9 f7       	brne	.-6      	; 0x1fc8 <LCD_sendNumber+0x2e>
    1fce:	18 8a       	std	Y+16, r1	; 0x10
    1fd0:	1f 86       	std	Y+15, r1	; 0x0f
			   if(num == 0)
    1fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fd6:	af 8d       	ldd	r26, Y+31	; 0x1f
    1fd8:	b8 a1       	ldd	r27, Y+32	; 0x20
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	a1 05       	cpc	r26, r1
    1fde:	b1 05       	cpc	r27, r1
    1fe0:	a1 f5       	brne	.+104    	; 0x204a <LCD_sendNumber+0xb0>
			   {
				    LCD_sendChar(lcd,'0');
    1fe2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe6:	60 e3       	ldi	r22, 0x30	; 48
    1fe8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_sendChar>
    1fec:	c3 c0       	rjmp	.+390    	; 0x2174 <LCD_sendNumber+0x1da>

			   else
			   {
				   while(num)
				   {
					   numArr[i]= num%10+'0';
    1fee:	88 89       	ldd	r24, Y+16	; 0x10
    1ff0:	08 2f       	mov	r16, r24
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
    1ff4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ff8:	af 8d       	ldd	r26, Y+31	; 0x1f
    1ffa:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ffc:	2a e0       	ldi	r18, 0x0A	; 10
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__udivmodsi4>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	28 2f       	mov	r18, r24
    2012:	20 5d       	subi	r18, 0xD0	; 208
    2014:	ce 01       	movw	r24, r28
    2016:	41 96       	adiw	r24, 0x11	; 17
    2018:	fc 01       	movw	r30, r24
    201a:	e0 0f       	add	r30, r16
    201c:	f1 1f       	adc	r31, r17
    201e:	20 83       	st	Z, r18
					   num/=10;
    2020:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2022:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2024:	af 8d       	ldd	r26, Y+31	; 0x1f
    2026:	b8 a1       	ldd	r27, Y+32	; 0x20
    2028:	2a e0       	ldi	r18, 0x0A	; 10
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__udivmodsi4>
    2038:	da 01       	movw	r26, r20
    203a:	c9 01       	movw	r24, r18
    203c:	8d 8f       	std	Y+29, r24	; 0x1d
    203e:	9e 8f       	std	Y+30, r25	; 0x1e
    2040:	af 8f       	std	Y+31, r26	; 0x1f
    2042:	b8 a3       	std	Y+32, r27	; 0x20
						i++;
    2044:	88 89       	ldd	r24, Y+16	; 0x10
    2046:	8f 5f       	subi	r24, 0xFF	; 255
    2048:	88 8b       	std	Y+16, r24	; 0x10
				    return;
			   }

			   else
			   {
				   while(num)
    204a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    204c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    204e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2050:	b8 a1       	ldd	r27, Y+32	; 0x20
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	a1 05       	cpc	r26, r1
    2056:	b1 05       	cpc	r27, r1
    2058:	51 f6       	brne	.-108    	; 0x1fee <LCD_sendNumber+0x54>
				   {
					   numArr[i]= num%10+'0';
					   num/=10;
						i++;
				   }
				  for(j=i;j>0;j--)
    205a:	88 89       	ldd	r24, Y+16	; 0x10
    205c:	8f 87       	std	Y+15, r24	; 0x0f
    205e:	86 c0       	rjmp	.+268    	; 0x216c <LCD_sendNumber+0x1d2>
				  {

					   LCD_sendChar(lcd,numArr[j-1]);
    2060:	8f 85       	ldd	r24, Y+15	; 0x0f
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9c 01       	movw	r18, r24
    2068:	21 50       	subi	r18, 0x01	; 1
    206a:	30 40       	sbci	r19, 0x00	; 0
    206c:	ce 01       	movw	r24, r28
    206e:	41 96       	adiw	r24, 0x11	; 17
    2070:	fc 01       	movw	r30, r24
    2072:	e2 0f       	add	r30, r18
    2074:	f3 1f       	adc	r31, r19
    2076:	20 81       	ld	r18, Z
    2078:	8b 8d       	ldd	r24, Y+27	; 0x1b
    207a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    207c:	62 2f       	mov	r22, r18
    207e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_sendChar>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e2       	ldi	r26, 0x20	; 32
    2088:	b1 e4       	ldi	r27, 0x41	; 65
    208a:	8b 87       	std	Y+11, r24	; 0x0b
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	ad 87       	std	Y+13, r26	; 0x0d
    2090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6b 85       	ldd	r22, Y+11	; 0x0b
    2094:	7c 85       	ldd	r23, Y+12	; 0x0c
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a ef       	ldi	r20, 0xFA	; 250
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
    20ae:	a9 87       	std	Y+9, r26	; 0x09
    20b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_sendNumber+0x13a>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <LCD_sendNumber+0x1b8>
	else if (__tmp > 65535)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <LCD_sendNumber+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <LCD_sendNumber+0x19a>
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_sendNumber+0x188>
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <LCD_sendNumber+0x17c>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <LCD_sendNumber+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_sendNumber+0x1c4>
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
				   {
					   numArr[i]= num%10+'0';
					   num/=10;
						i++;
				   }
				  for(j=i;j>0;j--)
    2166:	8f 85       	ldd	r24, Y+15	; 0x0f
    2168:	81 50       	subi	r24, 0x01	; 1
    216a:	8f 87       	std	Y+15, r24	; 0x0f
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	88 23       	and	r24, r24
    2170:	09 f0       	breq	.+2      	; 0x2174 <LCD_sendNumber+0x1da>
    2172:	76 cf       	rjmp	.-276    	; 0x2060 <LCD_sendNumber+0xc6>
					   LCD_sendChar(lcd,numArr[j-1]);
					   _delay_ms(10);
				   }
			   }

}
    2174:	a0 96       	adiw	r28, 0x20	; 32
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	1f 91       	pop	r17
    2186:	0f 91       	pop	r16
    2188:	08 95       	ret

0000218a <LCD_sendString>:
void LCD_sendString(LCD_cofig* lcd,u8* string ){
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <LCD_sendString+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <LCD_sendString+0x8>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	7c 83       	std	Y+4, r23	; 0x04
    219c:	6b 83       	std	Y+3, r22	; 0x03
    219e:	0d c0       	rjmp	.+26     	; 0x21ba <LCD_sendString+0x30>

	while(*string){
		LCD_sendChar(lcd,*string++);
    21a0:	eb 81       	ldd	r30, Y+3	; 0x03
    21a2:	fc 81       	ldd	r31, Y+4	; 0x04
    21a4:	20 81       	ld	r18, Z
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	9c 83       	std	Y+4, r25	; 0x04
    21ae:	8b 83       	std	Y+3, r24	; 0x03
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	62 2f       	mov	r22, r18
    21b6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_sendChar>
			   }

}
void LCD_sendString(LCD_cofig* lcd,u8* string ){

	while(*string){
    21ba:	eb 81       	ldd	r30, Y+3	; 0x03
    21bc:	fc 81       	ldd	r31, Y+4	; 0x04
    21be:	80 81       	ld	r24, Z
    21c0:	88 23       	and	r24, r24
    21c2:	71 f7       	brne	.-36     	; 0x21a0 <LCD_sendString+0x16>
		LCD_sendChar(lcd,*string++);
	}
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <LCD_clear>:
void LCD_clear(LCD_cofig* lcd){
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <LCD_clear+0x6>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(lcd,_LCD_CLEAR);
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	61 e0       	ldi	r22, 0x01	; 1
    21e6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <LCD_setCursor>:
void LCD_setCursor(LCD_cofig* lcd,u8 row,u8 column){
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <LCD_setCursor+0x6>
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <LCD_setCursor+0x8>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <LCD_setCursor+0xa>
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	6b 83       	std	Y+3, r22	; 0x03
    2208:	4c 83       	std	Y+4, r20	; 0x04

	  column--;
    220a:	8c 81       	ldd	r24, Y+4	; 0x04
    220c:	81 50       	subi	r24, 0x01	; 1
    220e:	8c 83       	std	Y+4, r24	; 0x04

			switch(row){
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3e 83       	std	Y+6, r19	; 0x06
    2218:	2d 83       	std	Y+5, r18	; 0x05
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	91 05       	cpc	r25, r1
    2222:	31 f0       	breq	.+12     	; 0x2230 <LCD_setCursor+0x3c>
    2224:	2d 81       	ldd	r18, Y+5	; 0x05
    2226:	3e 81       	ldd	r19, Y+6	; 0x06
    2228:	22 30       	cpi	r18, 0x02	; 2
    222a:	31 05       	cpc	r19, r1
    222c:	51 f0       	breq	.+20     	; 0x2242 <LCD_setCursor+0x4e>
    222e:	11 c0       	rjmp	.+34     	; 0x2252 <LCD_setCursor+0x5e>
			            case ROW1:  LCD_sendCommand(lcd,(0x80 + column)); break;
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	28 2f       	mov	r18, r24
    2234:	20 58       	subi	r18, 0x80	; 128
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	9a 81       	ldd	r25, Y+2	; 0x02
    223a:	62 2f       	mov	r22, r18
    223c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>
    2240:	08 c0       	rjmp	.+16     	; 0x2252 <LCD_setCursor+0x5e>
			            case ROW2:  LCD_sendCommand(lcd,(0xc0 + column)); break;
    2242:	8c 81       	ldd	r24, Y+4	; 0x04
    2244:	28 2f       	mov	r18, r24
    2246:	20 54       	subi	r18, 0x40	; 64
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	62 2f       	mov	r22, r18
    224e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_sendCommand>
			            default:;
			        }
}
    2252:	26 96       	adiw	r28, 0x06	; 6
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <KP_u8KeyPadInit>:
#include "KP_PRIV.h"




void KP_u8KeyPadInit(kp_conf* keypad){
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	00 d0       	rcall	.+0      	; 0x226a <KP_u8KeyPadInit+0x6>
    226a:	00 d0       	rcall	.+0      	; 0x226c <KP_u8KeyPadInit+0x8>
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	9c 83       	std	Y+4, r25	; 0x04
    2272:	8b 83       	std	Y+3, r24	; 0x03
	  for(u8 i=0; i<ROW_NUM; i++)
    2274:	1a 82       	std	Y+2, r1	; 0x02
    2276:	3b c0       	rjmp	.+118    	; 0x22ee <KP_u8KeyPadInit+0x8a>
	       {

	    	   DIO_SET_PIN_DIR(keypad->rowsPins[i].port,keypad->rowsPins[i].pin,DIO_INPUT);
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	2b 81       	ldd	r18, Y+3	; 0x03
    2280:	3c 81       	ldd	r19, Y+4	; 0x04
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	82 0f       	add	r24, r18
    2288:	93 1f       	adc	r25, r19
    228a:	fc 01       	movw	r30, r24
    228c:	31 96       	adiw	r30, 0x01	; 1
    228e:	40 81       	ld	r20, Z
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	f9 01       	movw	r30, r18
    22a0:	e8 0f       	add	r30, r24
    22a2:	f9 1f       	adc	r31, r25
    22a4:	90 81       	ld	r25, Z
    22a6:	84 2f       	mov	r24, r20
    22a8:	69 2f       	mov	r22, r25
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SET_PIN_DIR>
	    	   DIO_SET_PIN_VAL(keypad->rowsPins[i].port,keypad->rowsPins[i].pin,DIO_HIGH);
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	88 2f       	mov	r24, r24
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	2b 81       	ldd	r18, Y+3	; 0x03
    22b8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	82 0f       	add	r24, r18
    22c0:	93 1f       	adc	r25, r19
    22c2:	fc 01       	movw	r30, r24
    22c4:	31 96       	adiw	r30, 0x01	; 1
    22c6:	40 81       	ld	r20, Z
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	2b 81       	ldd	r18, Y+3	; 0x03
    22d0:	3c 81       	ldd	r19, Y+4	; 0x04
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	f9 01       	movw	r30, r18
    22d8:	e8 0f       	add	r30, r24
    22da:	f9 1f       	adc	r31, r25
    22dc:	90 81       	ld	r25, Z
    22de:	84 2f       	mov	r24, r20
    22e0:	69 2f       	mov	r22, r25
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>




void KP_u8KeyPadInit(kp_conf* keypad){
	  for(u8 i=0; i<ROW_NUM; i++)
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	10 f2       	brcs	.-124    	; 0x2278 <KP_u8KeyPadInit+0x14>
	       {

	    	   DIO_SET_PIN_DIR(keypad->rowsPins[i].port,keypad->rowsPins[i].pin,DIO_INPUT);
	    	   DIO_SET_PIN_VAL(keypad->rowsPins[i].port,keypad->rowsPins[i].pin,DIO_HIGH);
}
	  for(u8 i=0; i<COLUMN_NUM; i++)
    22f4:	19 82       	std	Y+1, r1	; 0x01
    22f6:	3d c0       	rjmp	.+122    	; 0x2372 <KP_u8KeyPadInit+0x10e>
	 	       {

		  DIO_SET_PIN_DIR(keypad->columnsPins[i].port,keypad->columnsPins[i].pin,DIO_OUTPUT);
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	88 2f       	mov	r24, r24
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2300:	3c 81       	ldd	r19, Y+4	; 0x04
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	82 0f       	add	r24, r18
    2308:	93 1f       	adc	r25, r19
    230a:	fc 01       	movw	r30, r24
    230c:	39 96       	adiw	r30, 0x09	; 9
    230e:	40 81       	ld	r20, Z
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	2b 81       	ldd	r18, Y+3	; 0x03
    2318:	3c 81       	ldd	r19, Y+4	; 0x04
    231a:	04 96       	adiw	r24, 0x04	; 4
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	f9 01       	movw	r30, r18
    2322:	e8 0f       	add	r30, r24
    2324:	f9 1f       	adc	r31, r25
    2326:	90 81       	ld	r25, Z
    2328:	84 2f       	mov	r24, r20
    232a:	69 2f       	mov	r22, r25
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SET_PIN_DIR>
		  DIO_SET_PIN_VAL(keypad->columnsPins[i].port,keypad->columnsPins[i].pin,DIO_HIGH);
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	2b 81       	ldd	r18, Y+3	; 0x03
    233a:	3c 81       	ldd	r19, Y+4	; 0x04
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	fc 01       	movw	r30, r24
    2346:	39 96       	adiw	r30, 0x09	; 9
    2348:	40 81       	ld	r20, Z
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	2b 81       	ldd	r18, Y+3	; 0x03
    2352:	3c 81       	ldd	r19, Y+4	; 0x04
    2354:	04 96       	adiw	r24, 0x04	; 4
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	f9 01       	movw	r30, r18
    235c:	e8 0f       	add	r30, r24
    235e:	f9 1f       	adc	r31, r25
    2360:	90 81       	ld	r25, Z
    2362:	84 2f       	mov	r24, r20
    2364:	69 2f       	mov	r22, r25
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
	       {

	    	   DIO_SET_PIN_DIR(keypad->rowsPins[i].port,keypad->rowsPins[i].pin,DIO_INPUT);
	    	   DIO_SET_PIN_VAL(keypad->rowsPins[i].port,keypad->rowsPins[i].pin,DIO_HIGH);
}
	  for(u8 i=0; i<COLUMN_NUM; i++)
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	8f 5f       	subi	r24, 0xFF	; 255
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	84 30       	cpi	r24, 0x04	; 4
    2376:	08 f4       	brcc	.+2      	; 0x237a <KP_u8KeyPadInit+0x116>
    2378:	bf cf       	rjmp	.-130    	; 0x22f8 <KP_u8KeyPadInit+0x94>
	 	       {

		  DIO_SET_PIN_DIR(keypad->columnsPins[i].port,keypad->columnsPins[i].pin,DIO_OUTPUT);
		  DIO_SET_PIN_VAL(keypad->columnsPins[i].port,keypad->columnsPins[i].pin,DIO_HIGH);
}
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <KP_u8GetPressedKey>:

u8 KP_u8GetPressedKey(kp_conf* keypad){
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	65 97       	sbiw	r28, 0x15	; 21
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	9c 8b       	std	Y+20, r25	; 0x14
    239e:	8b 8b       	std	Y+19, r24	; 0x13

    u8 local_u8pressedKey= KEYPAD_NO_PRESSED_KEY;
    23a0:	19 8a       	std	Y+17, r1	; 0x11
static	u8 local_u8ketpadArr[4][4]=KEYPAD_ARR;

	u8 local_u8ColumnIter=0;
    23a2:	18 8a       	std	Y+16, r1	; 0x10
	u8 local_u8RowIter=0;
    23a4:	1f 86       	std	Y+15, r1	; 0x0f
    23a6:	12 c1       	rjmp	.+548    	; 0x25cc <KP_u8GetPressedKey+0x244>
  for(;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
  {
	  //activate currant column
	   DIO_SET_PIN_VAL(keypad->columnsPins[local_u8ColumnIter].port,keypad->columnsPins[local_u8ColumnIter].pin,DIO_LOW);
    23a8:	88 89       	ldd	r24, Y+16	; 0x10
    23aa:	88 2f       	mov	r24, r24
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	2b 89       	ldd	r18, Y+19	; 0x13
    23b0:	3c 89       	ldd	r19, Y+20	; 0x14
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	82 0f       	add	r24, r18
    23b8:	93 1f       	adc	r25, r19
    23ba:	fc 01       	movw	r30, r24
    23bc:	39 96       	adiw	r30, 0x09	; 9
    23be:	40 81       	ld	r20, Z
    23c0:	88 89       	ldd	r24, Y+16	; 0x10
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	2b 89       	ldd	r18, Y+19	; 0x13
    23c8:	3c 89       	ldd	r19, Y+20	; 0x14
    23ca:	04 96       	adiw	r24, 0x04	; 4
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	f9 01       	movw	r30, r18
    23d2:	e8 0f       	add	r30, r24
    23d4:	f9 1f       	adc	r31, r25
    23d6:	90 81       	ld	r25, Z
    23d8:	84 2f       	mov	r24, r20
    23da:	69 2f       	mov	r22, r25
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	a0 e8       	ldi	r26, 0x80	; 128
    23e8:	bf e3       	ldi	r27, 0x3F	; 63
    23ea:	8b 87       	std	Y+11, r24	; 0x0b
    23ec:	9c 87       	std	Y+12, r25	; 0x0c
    23ee:	ad 87       	std	Y+13, r26	; 0x0d
    23f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	4a ef       	ldi	r20, 0xFA	; 250
    2400:	54 e4       	ldi	r21, 0x44	; 68
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	8f 83       	std	Y+7, r24	; 0x07
    240c:	98 87       	std	Y+8, r25	; 0x08
    240e:	a9 87       	std	Y+9, r26	; 0x09
    2410:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2412:	6f 81       	ldd	r22, Y+7	; 0x07
    2414:	78 85       	ldd	r23, Y+8	; 0x08
    2416:	89 85       	ldd	r24, Y+9	; 0x09
    2418:	9a 85       	ldd	r25, Y+10	; 0x0a
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e8       	ldi	r20, 0x80	; 128
    2420:	5f e3       	ldi	r21, 0x3F	; 63
    2422:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2426:	88 23       	and	r24, r24
    2428:	2c f4       	brge	.+10     	; 0x2434 <KP_u8GetPressedKey+0xac>
		__ticks = 1;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	3f c0       	rjmp	.+126    	; 0x24b2 <KP_u8GetPressedKey+0x12a>
	else if (__tmp > 65535)
    2434:	6f 81       	ldd	r22, Y+7	; 0x07
    2436:	78 85       	ldd	r23, Y+8	; 0x08
    2438:	89 85       	ldd	r24, Y+9	; 0x09
    243a:	9a 85       	ldd	r25, Y+10	; 0x0a
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	3f ef       	ldi	r19, 0xFF	; 255
    2440:	4f e7       	ldi	r20, 0x7F	; 127
    2442:	57 e4       	ldi	r21, 0x47	; 71
    2444:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2448:	18 16       	cp	r1, r24
    244a:	4c f5       	brge	.+82     	; 0x249e <KP_u8GetPressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244c:	6b 85       	ldd	r22, Y+11	; 0x0b
    244e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2450:	8d 85       	ldd	r24, Y+13	; 0x0d
    2452:	9e 85       	ldd	r25, Y+14	; 0x0e
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e2       	ldi	r20, 0x20	; 32
    245a:	51 e4       	ldi	r21, 0x41	; 65
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9e 83       	std	Y+6, r25	; 0x06
    2472:	8d 83       	std	Y+5, r24	; 0x05
    2474:	0f c0       	rjmp	.+30     	; 0x2494 <KP_u8GetPressedKey+0x10c>
    2476:	88 ec       	ldi	r24, 0xC8	; 200
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9c 83       	std	Y+4, r25	; 0x04
    247c:	8b 83       	std	Y+3, r24	; 0x03
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <KP_u8GetPressedKey+0xfa>
    2486:	9c 83       	std	Y+4, r25	; 0x04
    2488:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2494:	8d 81       	ldd	r24, Y+5	; 0x05
    2496:	9e 81       	ldd	r25, Y+6	; 0x06
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	69 f7       	brne	.-38     	; 0x2476 <KP_u8GetPressedKey+0xee>
    249c:	14 c0       	rjmp	.+40     	; 0x24c6 <KP_u8GetPressedKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249e:	6f 81       	ldd	r22, Y+7	; 0x07
    24a0:	78 85       	ldd	r23, Y+8	; 0x08
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <KP_u8GetPressedKey+0x136>
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        local_u8RowIter=0;
    24c6:	1f 86       	std	Y+15, r1	; 0x0f
    24c8:	5d c0       	rjmp	.+186    	; 0x2584 <KP_u8GetPressedKey+0x1fc>
       for(; local_u8RowIter<ROW_NUM; local_u8RowIter++)
       {
    	   u8 local_u8RowVal;
    	   DIO_GET_PIN_VAL(keypad->rowsPins[local_u8RowIter].port,keypad->rowsPins[local_u8RowIter].pin,&local_u8RowVal);
    24ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	2b 89       	ldd	r18, Y+19	; 0x13
    24d2:	3c 89       	ldd	r19, Y+20	; 0x14
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	82 0f       	add	r24, r18
    24da:	93 1f       	adc	r25, r19
    24dc:	fc 01       	movw	r30, r24
    24de:	31 96       	adiw	r30, 0x01	; 1
    24e0:	40 81       	ld	r20, Z
    24e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	2b 89       	ldd	r18, Y+19	; 0x13
    24ea:	3c 89       	ldd	r19, Y+20	; 0x14
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	f9 01       	movw	r30, r18
    24f2:	e8 0f       	add	r30, r24
    24f4:	f9 1f       	adc	r31, r25
    24f6:	90 81       	ld	r25, Z
    24f8:	9e 01       	movw	r18, r28
    24fa:	2e 5e       	subi	r18, 0xEE	; 238
    24fc:	3f 4f       	sbci	r19, 0xFF	; 255
    24fe:	84 2f       	mov	r24, r20
    2500:	69 2f       	mov	r22, r25
    2502:	a9 01       	movw	r20, r18
    2504:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_GET_PIN_VAL>
    	 //check if switch is pressed
    	   if(local_u8RowVal==DIO_LOW){
    2508:	8a 89       	ldd	r24, Y+18	; 0x12
    250a:	88 23       	and	r24, r24
    250c:	c1 f5       	brne	.+112    	; 0x257e <KP_u8GetPressedKey+0x1f6>
    		  local_u8pressedKey=local_u8ketpadArr[local_u8RowIter][local_u8ColumnIter];
    250e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2510:	48 2f       	mov	r20, r24
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	88 89       	ldd	r24, Y+16	; 0x10
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	ca 01       	movw	r24, r20
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	82 0f       	add	r24, r18
    2526:	93 1f       	adc	r25, r19
    2528:	fc 01       	movw	r30, r24
    252a:	e2 59       	subi	r30, 0x92	; 146
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	89 8b       	std	Y+17, r24	; 0x11
    2532:	1f c0       	rjmp	.+62     	; 0x2572 <KP_u8GetPressedKey+0x1ea>
    	   //polling until the key is released
    	   while(local_u8RowVal==DIO_LOW)
    	    {
    		   DIO_GET_PIN_VAL(keypad->rowsPins[local_u8RowIter].port,keypad->rowsPins[local_u8RowIter].pin,&local_u8RowVal);
    2534:	8f 85       	ldd	r24, Y+15	; 0x0f
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	2b 89       	ldd	r18, Y+19	; 0x13
    253c:	3c 89       	ldd	r19, Y+20	; 0x14
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	82 0f       	add	r24, r18
    2544:	93 1f       	adc	r25, r19
    2546:	fc 01       	movw	r30, r24
    2548:	31 96       	adiw	r30, 0x01	; 1
    254a:	40 81       	ld	r20, Z
    254c:	8f 85       	ldd	r24, Y+15	; 0x0f
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	2b 89       	ldd	r18, Y+19	; 0x13
    2554:	3c 89       	ldd	r19, Y+20	; 0x14
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	f9 01       	movw	r30, r18
    255c:	e8 0f       	add	r30, r24
    255e:	f9 1f       	adc	r31, r25
    2560:	90 81       	ld	r25, Z
    2562:	9e 01       	movw	r18, r28
    2564:	2e 5e       	subi	r18, 0xEE	; 238
    2566:	3f 4f       	sbci	r19, 0xFF	; 255
    2568:	84 2f       	mov	r24, r20
    256a:	69 2f       	mov	r22, r25
    256c:	a9 01       	movw	r20, r18
    256e:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_GET_PIN_VAL>
    	   DIO_GET_PIN_VAL(keypad->rowsPins[local_u8RowIter].port,keypad->rowsPins[local_u8RowIter].pin,&local_u8RowVal);
    	 //check if switch is pressed
    	   if(local_u8RowVal==DIO_LOW){
    		  local_u8pressedKey=local_u8ketpadArr[local_u8RowIter][local_u8ColumnIter];
    	   //polling until the key is released
    	   while(local_u8RowVal==DIO_LOW)
    2572:	8a 89       	ldd	r24, Y+18	; 0x12
    2574:	88 23       	and	r24, r24
    2576:	f1 f2       	breq	.-68     	; 0x2534 <KP_u8GetPressedKey+0x1ac>
    	    {
    		   DIO_GET_PIN_VAL(keypad->rowsPins[local_u8RowIter].port,keypad->rowsPins[local_u8RowIter].pin,&local_u8RowVal);
    	    }
    	      return  local_u8pressedKey;
    2578:	89 89       	ldd	r24, Y+17	; 0x11
    257a:	8d 8b       	std	Y+21, r24	; 0x15
    257c:	2d c0       	rjmp	.+90     	; 0x25d8 <KP_u8GetPressedKey+0x250>
  {
	  //activate currant column
	   DIO_SET_PIN_VAL(keypad->columnsPins[local_u8ColumnIter].port,keypad->columnsPins[local_u8ColumnIter].pin,DIO_LOW);
        _delay_ms(1);
        local_u8RowIter=0;
       for(; local_u8RowIter<ROW_NUM; local_u8RowIter++)
    257e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2580:	8f 5f       	subi	r24, 0xFF	; 255
    2582:	8f 87       	std	Y+15, r24	; 0x0f
    2584:	8f 85       	ldd	r24, Y+15	; 0x0f
    2586:	84 30       	cpi	r24, 0x04	; 4
    2588:	08 f4       	brcc	.+2      	; 0x258c <KP_u8GetPressedKey+0x204>
    258a:	9f cf       	rjmp	.-194    	; 0x24ca <KP_u8GetPressedKey+0x142>
    	    }
    	      return  local_u8pressedKey;
       }
       //deactivate currant column
  }
       DIO_SET_PIN_VAL(keypad->columnsPins[local_u8ColumnIter].port,keypad->columnsPins[local_u8ColumnIter].pin,DIO_HIGH);
    258c:	88 89       	ldd	r24, Y+16	; 0x10
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	2b 89       	ldd	r18, Y+19	; 0x13
    2594:	3c 89       	ldd	r19, Y+20	; 0x14
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	82 0f       	add	r24, r18
    259c:	93 1f       	adc	r25, r19
    259e:	fc 01       	movw	r30, r24
    25a0:	39 96       	adiw	r30, 0x09	; 9
    25a2:	40 81       	ld	r20, Z
    25a4:	88 89       	ldd	r24, Y+16	; 0x10
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	2b 89       	ldd	r18, Y+19	; 0x13
    25ac:	3c 89       	ldd	r19, Y+20	; 0x14
    25ae:	04 96       	adiw	r24, 0x04	; 4
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	f9 01       	movw	r30, r18
    25b6:	e8 0f       	add	r30, r24
    25b8:	f9 1f       	adc	r31, r25
    25ba:	90 81       	ld	r25, Z
    25bc:	84 2f       	mov	r24, r20
    25be:	69 2f       	mov	r22, r25
    25c0:	41 e0       	ldi	r20, 0x01	; 1
    25c2:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_SET_PIN_VAL>
    u8 local_u8pressedKey= KEYPAD_NO_PRESSED_KEY;
static	u8 local_u8ketpadArr[4][4]=KEYPAD_ARR;

	u8 local_u8ColumnIter=0;
	u8 local_u8RowIter=0;
  for(;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
    25c6:	88 89       	ldd	r24, Y+16	; 0x10
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	88 8b       	std	Y+16, r24	; 0x10
    25cc:	88 89       	ldd	r24, Y+16	; 0x10
    25ce:	84 30       	cpi	r24, 0x04	; 4
    25d0:	08 f4       	brcc	.+2      	; 0x25d4 <KP_u8GetPressedKey+0x24c>
    25d2:	ea ce       	rjmp	.-556    	; 0x23a8 <KP_u8GetPressedKey+0x20>
       //deactivate currant column
  }
       DIO_SET_PIN_VAL(keypad->columnsPins[local_u8ColumnIter].port,keypad->columnsPins[local_u8ColumnIter].pin,DIO_HIGH);

}
  return local_u8pressedKey;
    25d4:	89 89       	ldd	r24, Y+17	; 0x11
    25d6:	8d 8b       	std	Y+21, r24	; 0x15
    25d8:	8d 89       	ldd	r24, Y+21	; 0x15
}
    25da:	65 96       	adiw	r28, 0x15	; 21
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <main>:
#include"MCAL/DIO/interface.h"
#include"HAL/LCD/LCD_config.h"
#include"HAL/LCD/LCD.h"
#include "int.h"

int main(){
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	a4 97       	sbiw	r28, 0x24	; 36
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
	u8 x;
	     UART_init();
    2600:	0e 94 75 13 	call	0x26ea	; 0x26ea <UART_init>
	     pin_config RWpin ={DIO_PIN0,DIO_PORTA};
    2604:	1a 82       	std	Y+2, r1	; 0x02
    2606:	1b 82       	std	Y+3, r1	; 0x03
		 pin_config RSpin ={DIO_PIN1,DIO_PORTA};
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	8c 83       	std	Y+4, r24	; 0x04
    260c:	1d 82       	std	Y+5, r1	; 0x05
		 pin_config ENpin ={DIO_PIN2,DIO_PORTA};
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	8e 83       	std	Y+6, r24	; 0x06
    2612:	1f 82       	std	Y+7, r1	; 0x07

		 pin_config dataPins[4]={{DIO_PIN3,DIO_PORTA},{DIO_PIN4,DIO_PORTA},{DIO_PIN5,DIO_PORTA},{DIO_PIN6,DIO_PORTA}};
    2614:	ce 01       	movw	r24, r28
    2616:	08 96       	adiw	r24, 0x08	; 8
    2618:	9f 8f       	std	Y+31, r25	; 0x1f
    261a:	8e 8f       	std	Y+30, r24	; 0x1e
    261c:	ee e7       	ldi	r30, 0x7E	; 126
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	f9 a3       	std	Y+33, r31	; 0x21
    2622:	e8 a3       	std	Y+32, r30	; 0x20
    2624:	f8 e0       	ldi	r31, 0x08	; 8
    2626:	fa a3       	std	Y+34, r31	; 0x22
    2628:	e8 a1       	ldd	r30, Y+32	; 0x20
    262a:	f9 a1       	ldd	r31, Y+33	; 0x21
    262c:	00 80       	ld	r0, Z
    262e:	88 a1       	ldd	r24, Y+32	; 0x20
    2630:	99 a1       	ldd	r25, Y+33	; 0x21
    2632:	01 96       	adiw	r24, 0x01	; 1
    2634:	99 a3       	std	Y+33, r25	; 0x21
    2636:	88 a3       	std	Y+32, r24	; 0x20
    2638:	ee 8d       	ldd	r30, Y+30	; 0x1e
    263a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    263c:	00 82       	st	Z, r0
    263e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2640:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2642:	01 96       	adiw	r24, 0x01	; 1
    2644:	9f 8f       	std	Y+31, r25	; 0x1f
    2646:	8e 8f       	std	Y+30, r24	; 0x1e
    2648:	9a a1       	ldd	r25, Y+34	; 0x22
    264a:	91 50       	subi	r25, 0x01	; 1
    264c:	9a a3       	std	Y+34, r25	; 0x22
    264e:	ea a1       	ldd	r30, Y+34	; 0x22
    2650:	ee 23       	and	r30, r30
    2652:	51 f7       	brne	.-44     	; 0x2628 <main+0x3c>

		 LCD_cofig lcd={RSpin,RWpin,ENpin,{dataPins[0], dataPins[1], dataPins[2], dataPins[3]}};
    2654:	28 85       	ldd	r18, Y+8	; 0x08
    2656:	39 85       	ldd	r19, Y+9	; 0x09
    2658:	4a 85       	ldd	r20, Y+10	; 0x0a
    265a:	5b 85       	ldd	r21, Y+11	; 0x0b
    265c:	6c 85       	ldd	r22, Y+12	; 0x0c
    265e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2660:	ae 85       	ldd	r26, Y+14	; 0x0e
    2662:	bf 85       	ldd	r27, Y+15	; 0x0f
    2664:	8e e0       	ldi	r24, 0x0E	; 14
    2666:	fe 01       	movw	r30, r28
    2668:	70 96       	adiw	r30, 0x10	; 16
    266a:	fc a3       	std	Y+36, r31	; 0x24
    266c:	eb a3       	std	Y+35, r30	; 0x23
    266e:	eb a1       	ldd	r30, Y+35	; 0x23
    2670:	fc a1       	ldd	r31, Y+36	; 0x24
    2672:	98 2f       	mov	r25, r24
    2674:	11 92       	st	Z+, r1
    2676:	9a 95       	dec	r25
    2678:	e9 f7       	brne	.-6      	; 0x2674 <main+0x88>
    267a:	8c 81       	ldd	r24, Y+4	; 0x04
    267c:	9d 81       	ldd	r25, Y+5	; 0x05
    267e:	99 8b       	std	Y+17, r25	; 0x11
    2680:	88 8b       	std	Y+16, r24	; 0x10
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	9b 8b       	std	Y+19, r25	; 0x13
    2688:	8a 8b       	std	Y+18, r24	; 0x12
    268a:	8e 81       	ldd	r24, Y+6	; 0x06
    268c:	9f 81       	ldd	r25, Y+7	; 0x07
    268e:	9d 8b       	std	Y+21, r25	; 0x15
    2690:	8c 8b       	std	Y+20, r24	; 0x14
    2692:	3f 8b       	std	Y+23, r19	; 0x17
    2694:	2e 8b       	std	Y+22, r18	; 0x16
    2696:	59 8f       	std	Y+25, r21	; 0x19
    2698:	48 8f       	std	Y+24, r20	; 0x18
    269a:	7b 8f       	std	Y+27, r23	; 0x1b
    269c:	6a 8f       	std	Y+26, r22	; 0x1a
    269e:	bd 8f       	std	Y+29, r27	; 0x1d
    26a0:	ac 8f       	std	Y+28, r26	; 0x1c
		 LCD_voidInit(&lcd);
    26a2:	ce 01       	movw	r24, r28
    26a4:	40 96       	adiw	r24, 0x10	; 16
    26a6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <LCD_voidInit>

		 LCD_sendString(&lcd,"manar");
    26aa:	ce 01       	movw	r24, r28
    26ac:	40 96       	adiw	r24, 0x10	; 16
    26ae:	20 e6       	ldi	r18, 0x60	; 96
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	b9 01       	movw	r22, r18
    26b4:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_sendString>

		/* UART_u8transmit_data('t');
		 UART_u8transmit_data('h');
		 UART_u8transmit_data('u');*/

		 x=UART_u8receive_data();
    26b8:	0e 94 c7 13 	call	0x278e	; 0x278e <UART_u8receive_data>
    26bc:	89 83       	std	Y+1, r24	; 0x01

					// LCD_sendChar(&lcd,x);
		 LCD_sendNumber(&lcd,(u32)x);
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	ce 01       	movw	r24, r28
    26ca:	40 96       	adiw	r24, 0x10	; 16
    26cc:	ba 01       	movw	r22, r20
    26ce:	a9 01       	movw	r20, r18
    26d0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <LCD_sendNumber>
			return 1;}

		 }*/


	return 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
}
    26d8:	a4 96       	adiw	r28, 0x24	; 36
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <UART_init>:
#include "int.h"
#include <util/delay.h>
#include "BIT_SET.h"


void UART_init(){
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62

	//boad rate 9600 1x
	UCSRC_UBRRH=0;
    26f2:	e9 e2       	ldi	r30, 0x29	; 41
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	10 82       	st	Z, r1
	UBRRL=51;
    26f8:	e9 e2       	ldi	r30, 0x29	; 41
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	83 e3       	ldi	r24, 0x33	; 51
    26fe:	80 83       	st	Z, r24
// u1x speed
	RESET_BIT(UCSRA,U2X);
    2700:	ab e2       	ldi	r26, 0x2B	; 43
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	eb e2       	ldi	r30, 0x2B	; 43
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	8d 7f       	andi	r24, 0xFD	; 253
    270c:	8c 93       	st	X, r24
//asyn mode
	RESET_BIT(UCSRC_UBRRH,UMSEL);
    270e:	a9 e2       	ldi	r26, 0x29	; 41
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e9 e2       	ldi	r30, 0x29	; 41
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	8f 7b       	andi	r24, 0xBF	; 191
    271a:	8c 93       	st	X, r24
	//
	//PArity mode disabled by default

	//number of bits
	SET_BIT(UCSRC_UBRRH,CSBIT1);
    271c:	a9 e2       	ldi	r26, 0x29	; 41
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e9 e2       	ldi	r30, 0x29	; 41
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	84 60       	ori	r24, 0x04	; 4
    2728:	8c 93       	st	X, r24
	SET_BIT(UCSRC_UBRRH,CSBIT2);
    272a:	a9 e2       	ldi	r26, 0x29	; 41
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e9 e2       	ldi	r30, 0x29	; 41
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	82 60       	ori	r24, 0x02	; 2
    2736:	8c 93       	st	X, r24
	//enable
	SET_BIT(UCSRB,RXEN);
    2738:	aa e2       	ldi	r26, 0x2A	; 42
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	ea e2       	ldi	r30, 0x2A	; 42
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	80 61       	ori	r24, 0x10	; 16
    2744:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    2746:	aa e2       	ldi	r26, 0x2A	; 42
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	ea e2       	ldi	r30, 0x2A	; 42
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	88 60       	ori	r24, 0x08	; 8
    2752:	8c 93       	st	X, r24
}
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <UART_u8transmit_data>:

void UART_u8transmit_data(u8 data){
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	0f 92       	push	r0
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA,UDRE)); //polling
    2766:	eb e2       	ldi	r30, 0x2B	; 43
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	82 95       	swap	r24
    276e:	86 95       	lsr	r24
    2770:	87 70       	andi	r24, 0x07	; 7
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	81 70       	andi	r24, 0x01	; 1
    2778:	90 70       	andi	r25, 0x00	; 0
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	a1 f3       	breq	.-24     	; 0x2766 <UART_u8transmit_data+0xc>
	UDR=data;
    277e:	ec e2       	ldi	r30, 0x2C	; 44
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	80 83       	st	Z, r24
}
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <UART_u8receive_data>:
u8 UART_u8receive_data(){
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
	//check
	while(!GET_BIT(UCSRA,RXC));
    2796:	eb e2       	ldi	r30, 0x2B	; 43
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	88 23       	and	r24, r24
    279e:	dc f7       	brge	.-10     	; 0x2796 <UART_u8receive_data+0x8>
	return UDR;
    27a0:	ec e2       	ldi	r30, 0x2C	; 44
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
}
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <__udivmodsi4>:
    27ac:	a1 e2       	ldi	r26, 0x21	; 33
    27ae:	1a 2e       	mov	r1, r26
    27b0:	aa 1b       	sub	r26, r26
    27b2:	bb 1b       	sub	r27, r27
    27b4:	fd 01       	movw	r30, r26
    27b6:	0d c0       	rjmp	.+26     	; 0x27d2 <__udivmodsi4_ep>

000027b8 <__udivmodsi4_loop>:
    27b8:	aa 1f       	adc	r26, r26
    27ba:	bb 1f       	adc	r27, r27
    27bc:	ee 1f       	adc	r30, r30
    27be:	ff 1f       	adc	r31, r31
    27c0:	a2 17       	cp	r26, r18
    27c2:	b3 07       	cpc	r27, r19
    27c4:	e4 07       	cpc	r30, r20
    27c6:	f5 07       	cpc	r31, r21
    27c8:	20 f0       	brcs	.+8      	; 0x27d2 <__udivmodsi4_ep>
    27ca:	a2 1b       	sub	r26, r18
    27cc:	b3 0b       	sbc	r27, r19
    27ce:	e4 0b       	sbc	r30, r20
    27d0:	f5 0b       	sbc	r31, r21

000027d2 <__udivmodsi4_ep>:
    27d2:	66 1f       	adc	r22, r22
    27d4:	77 1f       	adc	r23, r23
    27d6:	88 1f       	adc	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	1a 94       	dec	r1
    27dc:	69 f7       	brne	.-38     	; 0x27b8 <__udivmodsi4_loop>
    27de:	60 95       	com	r22
    27e0:	70 95       	com	r23
    27e2:	80 95       	com	r24
    27e4:	90 95       	com	r25
    27e6:	9b 01       	movw	r18, r22
    27e8:	ac 01       	movw	r20, r24
    27ea:	bd 01       	movw	r22, r26
    27ec:	cf 01       	movw	r24, r30
    27ee:	08 95       	ret

000027f0 <__prologue_saves__>:
    27f0:	2f 92       	push	r2
    27f2:	3f 92       	push	r3
    27f4:	4f 92       	push	r4
    27f6:	5f 92       	push	r5
    27f8:	6f 92       	push	r6
    27fa:	7f 92       	push	r7
    27fc:	8f 92       	push	r8
    27fe:	9f 92       	push	r9
    2800:	af 92       	push	r10
    2802:	bf 92       	push	r11
    2804:	cf 92       	push	r12
    2806:	df 92       	push	r13
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	ca 1b       	sub	r28, r26
    281a:	db 0b       	sbc	r29, r27
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	09 94       	ijmp

00002828 <__epilogue_restores__>:
    2828:	2a 88       	ldd	r2, Y+18	; 0x12
    282a:	39 88       	ldd	r3, Y+17	; 0x11
    282c:	48 88       	ldd	r4, Y+16	; 0x10
    282e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2830:	6e 84       	ldd	r6, Y+14	; 0x0e
    2832:	7d 84       	ldd	r7, Y+13	; 0x0d
    2834:	8c 84       	ldd	r8, Y+12	; 0x0c
    2836:	9b 84       	ldd	r9, Y+11	; 0x0b
    2838:	aa 84       	ldd	r10, Y+10	; 0x0a
    283a:	b9 84       	ldd	r11, Y+9	; 0x09
    283c:	c8 84       	ldd	r12, Y+8	; 0x08
    283e:	df 80       	ldd	r13, Y+7	; 0x07
    2840:	ee 80       	ldd	r14, Y+6	; 0x06
    2842:	fd 80       	ldd	r15, Y+5	; 0x05
    2844:	0c 81       	ldd	r16, Y+4	; 0x04
    2846:	1b 81       	ldd	r17, Y+3	; 0x03
    2848:	aa 81       	ldd	r26, Y+2	; 0x02
    284a:	b9 81       	ldd	r27, Y+1	; 0x01
    284c:	ce 0f       	add	r28, r30
    284e:	d1 1d       	adc	r29, r1
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	ed 01       	movw	r28, r26
    285c:	08 95       	ret

0000285e <_exit>:
    285e:	f8 94       	cli

00002860 <__stop_program>:
    2860:	ff cf       	rjmp	.-2      	; 0x2860 <__stop_program>
